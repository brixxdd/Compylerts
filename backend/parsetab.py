
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ FSTRING GE GT ID INDENT KEYWORD LBRACKET LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RBRACKET RPAREN STRING TIMESprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINEassignment_statement : ID ASSIGN expression NEWLINE\n| ID ASSIGN list_literal NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statement\n| for_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON ID\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTfor_statement : KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTexpression : STRINGexpression : binary_expression\n| primary_expression\n| NUMBER\n| list_literal\n| FSTRINGbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| group\n| list_literalliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expressionreturn_type : ARROW ID\n| emptyempty :list_literal : LBRACKET list_items RBRACKETlist_items : expression\n| list_items COMMA expression\n| empty'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,25,26,27,29,30,33,34,35,37,49,50,51,52,53,57,58,60,62,63,66,67,68,69,70,71,72,73,74,75,76,77,78,80,81,82,91,92,96,104,105,106,109,111,112,113,115,116,117,118,119,],[9,9,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,30,-48,-31,34,-27,-28,-29,-30,-32,-33,-47,-49,-50,-3,-10,62,-14,-48,-48,-46,-45,-51,-52,-53,80,81,-56,-13,84,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-11,-12,-55,9,97,9,-24,9,110,9,114,-26,9,9,9,-18,9,-25,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,24,28,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,62,64,65,79,80,81,83,91,93,95,96,100,104,105,109,112,113,115,116,117,118,119,],[14,14,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,35,37,37,37,-3,-10,37,37,-14,37,37,37,37,37,37,37,37,37,37,37,-13,37,86,37,-11,-12,37,14,98,103,14,107,-24,14,14,-26,14,14,14,-18,14,-25,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,12,29,30,34,35,62,80,81,91,96,104,105,109,112,113,115,116,117,118,119,],[16,16,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-3,-10,-14,64,-13,-11,-12,16,16,108,16,16,-26,16,16,16,-18,16,-25,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,24,28,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,62,64,65,79,80,81,83,91,96,104,105,109,112,113,115,116,117,118,119,],[18,18,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,18,18,53,18,-3,-10,18,18,-14,53,53,53,53,53,53,53,53,53,53,53,-13,18,18,18,-11,-12,18,18,18,-24,18,18,-26,18,18,18,-18,18,-25,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,24,28,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,62,64,65,79,80,81,83,91,96,104,105,109,112,113,115,116,117,118,119,],[21,21,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,21,21,52,21,-3,-10,21,21,-14,52,52,52,52,52,52,52,52,52,52,52,-13,21,21,21,-11,-12,21,21,21,-24,21,21,-26,21,21,21,-18,21,-25,]),'FSTRING':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,28,29,30,31,32,34,62,64,65,79,80,81,83,91,96,104,105,109,112,113,115,116,117,118,119,],[22,22,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,22,22,22,-3,-10,22,22,-14,-13,22,22,22,-11,-12,22,22,22,-24,22,22,-26,22,22,22,-18,22,-25,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,24,28,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,62,64,65,79,80,81,83,91,96,104,105,109,112,113,115,116,117,118,119,],[28,28,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,28,28,28,28,-3,-10,28,28,-14,28,28,28,28,28,28,28,28,28,28,28,-13,28,28,28,-11,-12,28,28,28,-24,28,28,-26,28,28,28,-18,28,-25,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,58,60,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,86,91,96,104,105,109,112,113,115,116,117,118,119,],[24,24,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-48,-51,24,24,-53,39,-45,-52,-33,24,-47,-49,-50,24,-3,-10,24,24,-14,-48,-48,24,24,24,24,24,24,24,24,24,24,24,-46,-45,-51,-52,-53,-51,-56,-13,24,24,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,24,-11,-12,-55,24,-48,24,24,-24,24,24,-26,24,24,24,-18,24,-25,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,24,28,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,62,64,65,79,80,81,83,86,91,96,104,105,109,112,113,115,116,117,118,119,],[17,17,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,32,17,17,17,17,-3,-10,17,17,-14,65,32,17,17,17,17,17,17,17,17,17,17,17,-13,17,17,17,-11,-12,17,32,17,17,-24,17,17,-26,17,17,17,-18,17,-25,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,29,30,34,62,80,81,104,112,117,119,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-3,-10,-14,-13,-11,-12,-24,-26,-18,-25,]),'DEDENT':([3,4,5,6,7,8,9,10,11,12,29,30,34,62,80,81,96,104,109,112,115,117,118,119,],[-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-3,-10,-14,-13,-11,-12,104,-24,112,-26,117,-18,119,-25,]),'ASSIGN':([14,],[31,]),'PLUS':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,38,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'TIMES':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,40,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'DIVIDE':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,41,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'MOD':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,42,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'EQ':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,43,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'NE':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,44,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'LT':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,45,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'GT':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,46,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'LE':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,47,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'GE':([14,15,18,19,20,21,23,25,26,27,35,37,49,50,51,52,53,58,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,],[-48,-51,-53,48,-45,-52,-33,-47,-49,-50,-48,-48,-46,-45,-51,-52,-53,-51,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-48,]),'COLON':([15,18,19,20,21,22,23,25,26,27,33,35,37,49,50,51,52,53,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,85,86,94,99,101,103,107,108,],[-31,-27,-28,-29,-30,-32,-33,-47,-49,-50,63,-48,-48,-46,-45,-51,-52,-53,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,92,93,-61,106,-60,93,-59,111,]),'RPAREN':([15,18,19,20,21,22,23,25,26,27,32,36,37,49,50,51,52,53,59,60,61,65,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,87,88,90,98,102,103,],[-31,-27,-28,-29,-30,-32,-33,-47,-49,-50,60,66,-48,-46,-45,-51,-52,-53,82,-56,-57,60,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-22,94,-19,-58,-21,-20,-22,]),'RBRACKET':([15,18,19,20,21,22,23,25,26,27,28,37,49,50,51,52,53,54,55,56,60,66,67,68,69,70,71,72,73,74,75,76,77,78,82,89,],[-31,-27,-28,-29,-30,-32,-33,-47,-49,-50,-61,-48,-46,-45,-51,-52,-53,78,-63,-65,-56,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-64,]),'COMMA':([15,18,19,20,21,22,23,25,26,27,28,37,49,50,51,52,53,54,55,56,59,60,61,66,67,68,69,70,71,72,73,74,75,76,77,78,82,86,87,88,89,90,98,102,103,],[-31,-27,-28,-29,-30,-32,-33,-47,-49,-50,-61,-48,-46,-45,-51,-52,-53,79,-63,-65,83,-56,-57,-54,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-44,-62,-55,-22,95,-19,-64,-58,-21,-20,-22,]),'INDENT':([84,97,110,114,],[91,105,113,116,]),'ARROW':([94,],[100,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,91,105,113,116,],[2,96,109,115,118,]),'statement':([0,2,91,96,105,109,113,115,116,118,],[3,29,3,29,3,29,3,29,3,29,]),'simple_statement':([0,2,91,96,105,109,113,115,116,118,],[4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,91,96,105,109,113,115,116,118,],[5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,91,96,105,109,113,115,116,118,],[6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,91,96,105,109,113,115,116,118,],[7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,91,96,105,109,113,115,116,118,],[8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,91,96,105,109,113,115,116,118,],[10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,91,96,105,109,113,115,116,118,],[11,11,11,11,11,11,11,11,11,11,]),'for_statement':([0,2,91,96,105,109,113,115,116,118,],[12,12,12,12,12,12,12,12,12,12,]),'expression':([0,2,16,17,28,31,32,64,65,79,83,91,96,105,109,113,115,116,118,],[13,13,33,36,55,57,61,85,61,89,90,13,13,13,13,13,13,13,13,]),'list_literal':([0,2,16,17,24,28,31,32,38,39,40,41,42,43,44,45,46,47,48,64,65,79,83,91,96,105,109,113,115,116,118,],[15,15,15,15,51,15,58,15,51,51,51,51,51,51,51,51,51,51,51,15,15,15,15,15,15,15,15,15,15,15,15,]),'binary_expression':([0,2,16,17,28,31,32,64,65,79,83,91,96,105,109,113,115,116,118,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'primary_expression':([0,2,16,17,24,28,31,32,38,39,40,41,42,43,44,45,46,47,48,64,65,79,83,91,96,105,109,113,115,116,118,],[20,20,20,20,50,20,20,20,50,50,50,50,50,50,50,50,50,50,50,20,20,20,20,20,20,20,20,20,20,20,20,]),'unary_expression':([0,2,16,17,24,28,31,32,38,39,40,41,42,43,44,45,46,47,48,64,65,79,83,91,96,105,109,113,115,116,118,],[23,23,23,23,49,23,23,23,67,68,69,70,71,72,73,74,75,76,77,23,23,23,23,23,23,23,23,23,23,23,23,]),'literal':([0,2,16,17,24,28,31,32,38,39,40,41,42,43,44,45,46,47,48,64,65,79,83,91,96,105,109,113,115,116,118,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'call':([0,2,16,17,24,28,31,32,38,39,40,41,42,43,44,45,46,47,48,64,65,79,83,91,96,105,109,113,115,116,118,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'group':([0,2,16,17,24,28,31,32,38,39,40,41,42,43,44,45,46,47,48,64,65,79,83,91,96,105,109,113,115,116,118,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'list_items':([28,],[54,]),'empty':([28,94,],[56,101,]),'arguments':([32,65,],[59,59,]),'parameter_list':([65,],[87,]),'parameter':([65,95,],[88,102,]),'return_type':([94,],[99,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',43),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',69),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',70),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',83),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',84),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',89),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',90),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',91),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',92),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',100),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',117),
  ('assignment_statement -> ID ASSIGN list_literal NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',118),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',135),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',136),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',145),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',146),
  ('compound_statement -> for_statement','compound_statement',1,'p_compound_statement','ply_parser.py',147),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',152),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',183),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',184),
  ('parameter -> ID COLON ID','parameter',3,'p_parameter','ply_parser.py',191),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',192),
  ('type -> ID','type',1,'p_type','ply_parser.py',210),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',226),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',227),
  ('for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','for_statement',9,'p_for_statement','ply_parser.py',241),
  ('expression -> STRING','expression',1,'p_expression_string','ply_parser.py',249),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',254),
  ('expression -> primary_expression','expression',1,'p_expression','ply_parser.py',255),
  ('expression -> NUMBER','expression',1,'p_expression','ply_parser.py',256),
  ('expression -> list_literal','expression',1,'p_expression','ply_parser.py',257),
  ('expression -> FSTRING','expression',1,'p_expression','ply_parser.py',258),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',270),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',271),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',272),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',273),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',274),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',275),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',276),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',277),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',278),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',279),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',280),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',281),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',303),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',304),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',312),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',313),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',314),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',315),
  ('primary_expression -> list_literal','primary_expression',1,'p_primary_expression','ply_parser.py',316),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',324),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',325),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',341),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',346),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',347),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',391),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',392),
  ('return_type -> ARROW ID','return_type',2,'p_return_type','ply_parser.py',400),
  ('return_type -> empty','return_type',1,'p_return_type','ply_parser.py',401),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',409),
  ('list_literal -> LBRACKET list_items RBRACKET','list_literal',3,'p_list_literal','ply_parser.py',414),
  ('list_items -> expression','list_items',1,'p_list_items','ply_parser.py',433),
  ('list_items -> list_items COMMA expression','list_items',3,'p_list_items','ply_parser.py',434),
  ('list_items -> empty','list_items',1,'p_list_items','ply_parser.py',435),
]
