
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ FSTRING GE GT ID INDENT KEYWORD LBRACKET LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RBRACKET RPAREN STRING TIMESprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINE\n| call NEWLINE\n| ID LPAREN arguments RPAREN NEWLINE\n| ID LPAREN RPAREN NEWLINEassignment_statement : ID ASSIGN expression NEWLINE\n| ID ASSIGN list_literal NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statement\n| for_statement\n| while_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENTfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON ID\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTfor_statement : KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTwhile_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTexpression : STRINGexpression : binary_expression\n| primary_expression\n| NUMBER\n| list_literal\n| FSTRINGbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| group\n| list_literalliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expression\n| STRING\n| arguments COMMA STRINGarguments : arguments COMMAreturn_type : ARROW ID\n| emptyempty :list_literal : LBRACKET list_items RBRACKETlist_items : expression\n| list_items COMMA expression\n| emptyfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE statement_list'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,28,30,31,32,36,37,38,39,40,52,53,54,55,56,61,64,65,66,68,69,72,73,74,75,76,77,78,79,80,81,82,83,85,87,88,89,91,98,101,102,103,105,107,110,112,115,116,117,119,121,122,123,124,125,126,127,128,130,131,132,133,134,135,],[9,9,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,31,32,-54,-37,39,-33,-34,-35,-36,-38,-39,-53,-56,-3,-10,-11,-54,-55,68,-17,-54,-52,-51,-57,-58,-59,87,88,89,-60,-16,92,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,98,-13,-14,-15,-62,-12,-61,9,108,-70,9,118,-69,-29,9,122,-68,9,9,9,129,-31,9,9,9,9,-23,9,-22,9,-30,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,104,106,107,111,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[16,16,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,36,40,36,36,-3,-10,-11,36,36,-17,36,36,36,36,36,36,36,36,36,36,36,36,-16,36,94,36,36,-13,-14,-15,-12,16,109,114,16,119,-29,16,16,16,16,-31,16,16,16,16,-23,16,-22,16,-30,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,12,13,30,31,32,39,40,68,87,88,89,98,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[19,19,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-3,-10,-11,-17,70,-16,-13,-14,-15,-12,19,19,120,19,19,19,19,-31,19,19,19,19,-23,19,-22,19,-30,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[20,20,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,20,20,56,20,-3,-10,-11,63,20,-17,56,56,56,56,56,56,56,56,56,56,56,63,-16,20,63,20,100,-13,-14,-15,-12,20,20,-29,20,20,20,20,-31,20,20,20,20,-23,20,-22,20,-30,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[23,23,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,23,23,55,23,-3,-10,-11,23,23,-17,55,55,55,55,55,55,55,55,55,55,55,23,-16,23,23,23,23,-13,-14,-15,-12,23,23,-29,23,23,23,23,-31,23,23,23,23,-23,23,-22,23,-30,]),'FSTRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,29,30,31,32,33,34,39,67,68,70,71,84,86,87,88,89,98,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[24,24,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,24,24,24,-3,-10,-11,24,24,-17,24,-16,24,24,24,24,-13,-14,-15,-12,24,24,-29,24,24,24,24,-31,24,24,24,24,-23,24,-22,24,-30,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[29,29,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,29,29,29,29,-3,-10,-11,29,29,-17,29,29,29,29,29,29,29,29,29,29,29,29,-16,29,29,29,29,-13,-14,-15,-12,29,29,-29,29,29,29,29,-31,29,29,29,29,-23,29,-22,29,-30,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,63,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,98,100,101,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[26,26,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-55,-54,26,-57,26,-59,42,-51,-58,-39,26,-53,-56,26,-3,-10,-11,26,26,-54,-55,-17,-54,26,26,26,26,26,26,26,26,26,26,26,-52,-51,-57,-58,-59,-62,-59,-57,-60,26,-16,26,26,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,26,-61,26,-13,-14,-15,-62,-54,-12,-59,-61,26,26,-29,26,26,26,26,-31,26,26,26,26,-23,26,-22,26,-30,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,17,19,26,29,30,31,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,94,98,102,107,115,116,121,122,123,125,126,127,128,130,131,132,133,134,135,],[17,17,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,33,17,17,17,17,-3,-10,-11,17,17,67,-17,71,17,17,17,17,17,17,17,17,17,17,17,17,-16,17,17,17,17,-13,-14,-15,67,-12,17,17,-29,17,17,17,17,-31,17,17,17,17,-23,17,-22,17,-30,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,30,31,32,39,68,87,88,89,98,115,125,127,131,133,135,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-3,-10,-11,-17,-16,-13,-14,-15,-12,-29,-31,-75,-23,-22,-30,]),'DEDENT':([3,4,5,6,7,8,9,10,11,12,13,30,31,32,39,68,87,88,89,98,107,115,121,125,127,128,130,131,133,134,135,],[-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-3,-10,-11,-17,-16,-13,-14,-15,-12,115,-29,125,-31,-75,131,133,-23,-22,135,-30,]),'PLUS':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,41,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'TIMES':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,43,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'DIVIDE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,44,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'MOD':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,45,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'EQ':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,46,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'NE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,47,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'LT':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,48,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'GT':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,49,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'LE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,50,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'GE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-55,-54,-57,-59,51,-51,-58,-39,-53,-56,-54,-55,-54,-52,-51,-57,-58,-59,-62,-59,-57,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-61,-62,-54,-59,-61,]),'ASSIGN':([16,],[34,]),'RPAREN':([18,20,21,22,23,24,25,27,28,33,35,36,37,52,53,54,55,56,60,62,63,66,67,71,72,73,74,75,76,77,78,79,80,81,82,83,86,90,91,94,95,96,99,100,101,109,113,114,],[-37,-33,-34,-35,-36,-38,-39,-53,-56,61,66,-54,-55,-52,-51,-57,-58,-59,85,-63,-33,-60,91,91,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-67,101,-62,-27,105,-24,-64,-33,-61,-26,-25,-27,]),'COLON':([18,20,21,22,23,24,25,27,28,36,37,38,40,52,53,54,55,56,66,72,73,74,75,76,77,78,79,80,81,82,83,91,93,94,101,105,110,112,114,119,120,],[-37,-33,-34,-35,-36,-38,-39,-53,-56,-54,-55,69,-54,-52,-51,-57,-58,-59,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-62,103,104,-61,-70,117,-69,104,-68,124,]),'RBRACKET':([18,20,21,22,23,24,25,27,28,29,36,37,52,53,54,55,56,57,58,59,66,72,73,74,75,76,77,78,79,80,81,82,83,91,97,101,],[-37,-33,-34,-35,-36,-38,-39,-53,-56,-70,-54,-55,-52,-51,-57,-58,-59,83,-72,-74,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-62,-73,-61,]),'COMMA':([18,20,21,22,23,24,25,27,28,29,36,37,52,53,54,55,56,57,58,59,60,62,63,66,72,73,74,75,76,77,78,79,80,81,82,83,86,90,91,94,95,96,97,99,100,101,109,113,114,],[-37,-33,-34,-35,-36,-38,-39,-53,-56,-70,-54,-55,-52,-51,-57,-58,-59,84,-72,-74,86,-63,-33,-60,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-71,-67,86,-62,-27,106,-24,-73,-64,-33,-61,-26,-25,-27,]),'INDENT':([92,108,118,122,129,],[102,116,123,126,132,]),'ARROW':([105,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,102,116,122,123,126,132,],[2,107,121,127,128,130,134,]),'statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[3,30,3,30,3,30,3,3,3,30,30,30,3,30,]),'simple_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'for_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[12,12,12,12,12,12,12,12,12,12,12,12,12,12,]),'while_statement':([0,2,102,107,116,121,122,123,126,127,128,130,132,134,],[13,13,13,13,13,13,13,13,13,13,13,13,13,13,]),'expression':([0,2,17,19,29,33,34,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[14,14,35,38,58,62,64,62,93,62,97,99,14,14,14,14,14,14,14,14,14,14,14,14,]),'call':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[15,15,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,15,15,15,15,15,15,15,15,15,15,15,15,]),'list_literal':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[18,18,18,18,54,18,18,65,54,54,54,54,54,54,54,54,54,54,54,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'binary_expression':([0,2,17,19,29,33,34,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'primary_expression':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[22,22,22,22,53,22,22,22,53,53,53,53,53,53,53,53,53,53,53,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'unary_expression':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[25,25,25,25,52,25,25,25,72,73,74,75,76,77,78,79,80,81,82,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'literal':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'group':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,121,122,123,126,127,128,130,132,134,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'list_items':([29,],[57,]),'empty':([29,105,],[59,112,]),'arguments':([33,67,71,],[60,90,90,]),'parameter_list':([71,],[95,]),'parameter':([71,106,],[96,113,]),'return_type':([105,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',47),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',85),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',86),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',101),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',102),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',107),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',108),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',109),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',110),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',119),
  ('expression_statement -> call NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',120),
  ('expression_statement -> ID LPAREN arguments RPAREN NEWLINE','expression_statement',5,'p_expression_statement','ply_parser.py',121),
  ('expression_statement -> ID LPAREN RPAREN NEWLINE','expression_statement',4,'p_expression_statement','ply_parser.py',122),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',149),
  ('assignment_statement -> ID ASSIGN list_literal NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',150),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',167),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',168),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',210),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',211),
  ('compound_statement -> for_statement','compound_statement',1,'p_compound_statement','ply_parser.py',212),
  ('compound_statement -> while_statement','compound_statement',1,'p_compound_statement','ply_parser.py',213),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',221),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type NEWLINE INDENT statement_list DEDENT','function_def',10,'p_function_def_missing_colon','ply_parser.py',259),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',296),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',297),
  ('parameter -> ID COLON ID','parameter',3,'p_parameter','ply_parser.py',304),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',305),
  ('type -> ID','type',1,'p_type','ply_parser.py',323),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',339),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',340),
  ('for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','for_statement',9,'p_for_statement','ply_parser.py',382),
  ('while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','while_statement',7,'p_while_statement','ply_parser.py',417),
  ('expression -> STRING','expression',1,'p_expression_string','ply_parser.py',446),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',451),
  ('expression -> primary_expression','expression',1,'p_expression','ply_parser.py',452),
  ('expression -> NUMBER','expression',1,'p_expression','ply_parser.py',453),
  ('expression -> list_literal','expression',1,'p_expression','ply_parser.py',454),
  ('expression -> FSTRING','expression',1,'p_expression','ply_parser.py',455),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',467),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',468),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',469),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',470),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',471),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',472),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',473),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',474),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',475),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',476),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',477),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',478),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',500),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',501),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',509),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',510),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',511),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',512),
  ('primary_expression -> list_literal','primary_expression',1,'p_primary_expression','ply_parser.py',513),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',532),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',533),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',549),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',554),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',555),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',618),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',619),
  ('arguments -> STRING','arguments',1,'p_arguments','ply_parser.py',620),
  ('arguments -> arguments COMMA STRING','arguments',3,'p_arguments','ply_parser.py',621),
  ('arguments -> arguments COMMA','arguments',2,'p_arguments_trailing_comma','ply_parser.py',637),
  ('return_type -> ARROW ID','return_type',2,'p_return_type','ply_parser.py',667),
  ('return_type -> empty','return_type',1,'p_return_type','ply_parser.py',668),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',676),
  ('list_literal -> LBRACKET list_items RBRACKET','list_literal',3,'p_list_literal','ply_parser.py',681),
  ('list_items -> expression','list_items',1,'p_list_items','ply_parser.py',700),
  ('list_items -> list_items COMMA expression','list_items',3,'p_list_items','ply_parser.py',701),
  ('list_items -> empty','list_items',1,'p_list_items','ply_parser.py',702),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE statement_list','function_def',9,'p_function_def_missing_indent','ply_parser.py',913),
]
