
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ FSTRING GE GT ID INDENT KEYWORD LBRACKET LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RBRACKET RPAREN STRING TIMESprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINE\n| call NEWLINE\n| ID LPAREN arguments RPAREN NEWLINE\n| ID LPAREN RPAREN NEWLINEassignment_statement : ID ASSIGN expression NEWLINE\n| ID ASSIGN list_literal NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statement\n| for_statement\n| while_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON ID\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTfor_statement : KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTwhile_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTexpression : STRINGexpression : binary_expression\n| primary_expression\n| NUMBER\n| list_literal\n| FSTRINGbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| group\n| list_literalliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expression\n| STRING\n| arguments COMMA STRINGarguments : arguments COMMAreturn_type : ARROW ID\n| emptyempty :list_literal : LBRACKET list_items RBRACKETlist_items : expression\n| list_items COMMA expression\n| empty'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,23,24,25,27,28,30,31,32,36,37,38,39,40,52,53,54,55,56,61,64,65,66,68,69,72,73,74,75,76,77,78,79,80,81,82,83,85,87,88,89,91,98,101,102,103,107,115,116,117,120,122,123,124,126,127,128,129,130,],[9,9,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,31,32,-53,-36,39,-32,-33,-34,-35,-37,-38,-52,-55,-3,-10,-11,-53,-54,68,-17,-53,-51,-50,-56,-57,-58,87,88,89,-59,-16,92,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,98,-13,-14,-15,-61,-12,-60,9,108,9,-28,9,121,9,125,-30,9,9,9,-22,9,-29,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,104,106,107,111,115,116,120,123,124,126,127,128,129,130,],[16,16,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,36,40,36,36,-3,-10,-11,36,36,-17,36,36,36,36,36,36,36,36,36,36,36,36,-16,36,94,36,36,-13,-14,-15,-12,16,109,114,16,118,-28,16,16,-30,16,16,16,-22,16,-29,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,12,13,30,31,32,39,40,68,87,88,89,98,102,107,115,116,120,123,124,126,127,128,129,130,],[19,19,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-3,-10,-11,-17,70,-16,-13,-14,-15,-12,19,19,119,19,19,-30,19,19,19,-22,19,-29,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,107,115,116,120,123,124,126,127,128,129,130,],[20,20,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,20,20,56,20,-3,-10,-11,63,20,-17,56,56,56,56,56,56,56,56,56,56,56,63,-16,20,63,20,100,-13,-14,-15,-12,20,20,-28,20,20,-30,20,20,20,-22,20,-29,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,107,115,116,120,123,124,126,127,128,129,130,],[23,23,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,23,23,55,23,-3,-10,-11,23,23,-17,55,55,55,55,55,55,55,55,55,55,55,23,-16,23,23,23,23,-13,-14,-15,-12,23,23,-28,23,23,-30,23,23,23,-22,23,-29,]),'FSTRING':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,29,30,31,32,33,34,39,67,68,70,71,84,86,87,88,89,98,102,107,115,116,120,123,124,126,127,128,129,130,],[24,24,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,24,24,24,-3,-10,-11,24,24,-17,24,-16,24,24,24,24,-13,-14,-15,-12,24,24,-28,24,24,-30,24,24,24,-22,24,-29,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,13,17,19,26,29,30,31,32,33,34,39,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,98,102,107,115,116,120,123,124,126,127,128,129,130,],[29,29,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,29,29,29,29,-3,-10,-11,29,29,-17,29,29,29,29,29,29,29,29,29,29,29,29,-16,29,29,29,29,-13,-14,-15,-12,29,29,-28,29,29,-30,29,29,29,-22,29,-29,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,13,15,16,17,18,19,20,21,22,23,25,26,27,28,29,30,31,32,33,34,36,37,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,61,63,65,66,67,68,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,94,98,100,101,102,107,115,116,120,123,124,126,127,128,129,130,],[26,26,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-54,-53,26,-56,26,-58,42,-50,-57,-38,26,-52,-55,26,-3,-10,-11,26,26,-53,-54,-17,-53,26,26,26,26,26,26,26,26,26,26,26,-51,-50,-56,-57,-58,-61,-58,-56,-59,26,-16,26,26,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,26,-60,26,-13,-14,-15,-61,-53,-12,-58,-60,26,26,-28,26,26,-30,26,26,26,-22,26,-29,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,13,16,17,19,26,29,30,31,32,33,34,36,39,40,41,42,43,44,45,46,47,48,49,50,51,67,68,70,71,84,86,87,88,89,94,98,102,107,115,116,120,123,124,126,127,128,129,130,],[17,17,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,33,17,17,17,17,-3,-10,-11,17,17,67,-17,71,17,17,17,17,17,17,17,17,17,17,17,17,-16,17,17,17,17,-13,-14,-15,67,-12,17,17,-28,17,17,-30,17,17,17,-22,17,-29,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,13,30,31,32,39,68,87,88,89,98,115,123,128,130,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-3,-10,-11,-17,-16,-13,-14,-15,-12,-28,-30,-22,-29,]),'DEDENT':([3,4,5,6,7,8,9,10,11,12,13,30,31,32,39,68,87,88,89,98,107,115,120,123,126,128,129,130,],[-2,-4,-5,-6,-7,-8,-9,-18,-19,-20,-21,-3,-10,-11,-17,-16,-13,-14,-15,-12,115,-28,123,-30,128,-22,130,-29,]),'PLUS':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,41,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'TIMES':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,43,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'DIVIDE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,44,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'MOD':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,45,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'EQ':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,46,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'NE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,47,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'LT':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,48,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'GT':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,49,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'LE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,50,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'GE':([15,16,18,20,21,22,23,25,27,28,36,37,40,52,53,54,55,56,61,63,65,66,72,73,74,75,76,77,78,79,80,81,82,83,85,91,94,100,101,],[-54,-53,-56,-58,51,-50,-57,-38,-52,-55,-53,-54,-53,-51,-50,-56,-57,-58,-61,-58,-56,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-60,-61,-53,-58,-60,]),'ASSIGN':([16,],[34,]),'RPAREN':([18,20,21,22,23,24,25,27,28,33,35,36,37,52,53,54,55,56,60,62,63,66,67,71,72,73,74,75,76,77,78,79,80,81,82,83,86,90,91,94,95,96,99,100,101,109,113,114,],[-36,-32,-33,-34,-35,-37,-38,-52,-55,61,66,-53,-54,-51,-50,-56,-57,-58,85,-62,-32,-59,91,91,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-66,101,-61,-26,105,-23,-63,-32,-60,-25,-24,-26,]),'COLON':([18,20,21,22,23,24,25,27,28,36,37,38,40,52,53,54,55,56,66,72,73,74,75,76,77,78,79,80,81,82,83,91,93,94,101,105,110,112,114,118,119,],[-36,-32,-33,-34,-35,-37,-38,-52,-55,-53,-54,69,-53,-51,-50,-56,-57,-58,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-61,103,104,-60,-69,117,-68,104,-67,122,]),'RBRACKET':([18,20,21,22,23,24,25,27,28,29,36,37,52,53,54,55,56,57,58,59,66,72,73,74,75,76,77,78,79,80,81,82,83,91,97,101,],[-36,-32,-33,-34,-35,-37,-38,-52,-55,-69,-53,-54,-51,-50,-56,-57,-58,83,-71,-73,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-61,-72,-60,]),'COMMA':([18,20,21,22,23,24,25,27,28,29,36,37,52,53,54,55,56,57,58,59,60,62,63,66,72,73,74,75,76,77,78,79,80,81,82,83,86,90,91,94,95,96,97,99,100,101,109,113,114,],[-36,-32,-33,-34,-35,-37,-38,-52,-55,-69,-53,-54,-51,-50,-56,-57,-58,84,-71,-73,86,-62,-32,-59,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-70,-66,86,-61,-26,106,-23,-72,-63,-32,-60,-25,-24,-26,]),'INDENT':([92,108,121,125,],[102,116,124,127,]),'ARROW':([105,],[111,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,102,116,124,127,],[2,107,120,126,129,]),'statement':([0,2,102,107,116,120,124,126,127,129,],[3,30,3,30,3,30,3,30,3,30,]),'simple_statement':([0,2,102,107,116,120,124,126,127,129,],[4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,102,107,116,120,124,126,127,129,],[5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,102,107,116,120,124,126,127,129,],[6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,102,107,116,120,124,126,127,129,],[7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,102,107,116,120,124,126,127,129,],[8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,102,107,116,120,124,126,127,129,],[10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,102,107,116,120,124,126,127,129,],[11,11,11,11,11,11,11,11,11,11,]),'for_statement':([0,2,102,107,116,120,124,126,127,129,],[12,12,12,12,12,12,12,12,12,12,]),'while_statement':([0,2,102,107,116,120,124,126,127,129,],[13,13,13,13,13,13,13,13,13,13,]),'expression':([0,2,17,19,29,33,34,67,70,71,84,86,102,107,116,120,124,126,127,129,],[14,14,35,38,58,62,64,62,93,62,97,99,14,14,14,14,14,14,14,14,]),'call':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,120,124,126,127,129,],[15,15,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,15,15,15,15,15,15,15,15,]),'list_literal':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,120,124,126,127,129,],[18,18,18,18,54,18,18,65,54,54,54,54,54,54,54,54,54,54,54,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'binary_expression':([0,2,17,19,29,33,34,67,70,71,84,86,102,107,116,120,124,126,127,129,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'primary_expression':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,120,124,126,127,129,],[22,22,22,22,53,22,22,22,53,53,53,53,53,53,53,53,53,53,53,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'unary_expression':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,120,124,126,127,129,],[25,25,25,25,52,25,25,25,72,73,74,75,76,77,78,79,80,81,82,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'literal':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,120,124,126,127,129,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'group':([0,2,17,19,26,29,33,34,41,42,43,44,45,46,47,48,49,50,51,67,70,71,84,86,102,107,116,120,124,126,127,129,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'list_items':([29,],[57,]),'empty':([29,105,],[59,112,]),'arguments':([33,67,71,],[60,90,90,]),'parameter_list':([71,],[95,]),'parameter':([71,106,],[96,113,]),'return_type':([105,],[110,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',47),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',85),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',86),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',101),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',102),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',107),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',108),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',109),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',110),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',119),
  ('expression_statement -> call NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',120),
  ('expression_statement -> ID LPAREN arguments RPAREN NEWLINE','expression_statement',5,'p_expression_statement','ply_parser.py',121),
  ('expression_statement -> ID LPAREN RPAREN NEWLINE','expression_statement',4,'p_expression_statement','ply_parser.py',122),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',149),
  ('assignment_statement -> ID ASSIGN list_literal NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',150),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',167),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',168),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',210),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',211),
  ('compound_statement -> for_statement','compound_statement',1,'p_compound_statement','ply_parser.py',212),
  ('compound_statement -> while_statement','compound_statement',1,'p_compound_statement','ply_parser.py',213),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',221),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',259),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',260),
  ('parameter -> ID COLON ID','parameter',3,'p_parameter','ply_parser.py',267),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',268),
  ('type -> ID','type',1,'p_type','ply_parser.py',286),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',302),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',303),
  ('for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','for_statement',9,'p_for_statement','ply_parser.py',345),
  ('while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','while_statement',7,'p_while_statement','ply_parser.py',380),
  ('expression -> STRING','expression',1,'p_expression_string','ply_parser.py',409),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',414),
  ('expression -> primary_expression','expression',1,'p_expression','ply_parser.py',415),
  ('expression -> NUMBER','expression',1,'p_expression','ply_parser.py',416),
  ('expression -> list_literal','expression',1,'p_expression','ply_parser.py',417),
  ('expression -> FSTRING','expression',1,'p_expression','ply_parser.py',418),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',430),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',431),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',432),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',433),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',434),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',435),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',436),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',437),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',438),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',439),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',440),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',441),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',463),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',464),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',472),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',473),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',474),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',475),
  ('primary_expression -> list_literal','primary_expression',1,'p_primary_expression','ply_parser.py',476),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',495),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',496),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',512),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',517),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',518),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',581),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',582),
  ('arguments -> STRING','arguments',1,'p_arguments','ply_parser.py',583),
  ('arguments -> arguments COMMA STRING','arguments',3,'p_arguments','ply_parser.py',584),
  ('arguments -> arguments COMMA','arguments',2,'p_arguments_trailing_comma','ply_parser.py',600),
  ('return_type -> ARROW ID','return_type',2,'p_return_type','ply_parser.py',623),
  ('return_type -> empty','return_type',1,'p_return_type','ply_parser.py',624),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',632),
  ('list_literal -> LBRACKET list_items RBRACKET','list_literal',3,'p_list_literal','ply_parser.py',637),
  ('list_items -> expression','list_items',1,'p_list_items','ply_parser.py',656),
  ('list_items -> list_items COMMA expression','list_items',3,'p_list_items','ply_parser.py',657),
  ('list_items -> empty','list_items',1,'p_list_items','ply_parser.py',658),
]
