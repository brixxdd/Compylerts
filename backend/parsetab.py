
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ GE GT ID INDENT KEYWORD LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RPAREN STRING TIMESprogram : statement_liststatement_list : statement\n                         | statement_list statementstatement : simple_statement\n                    | compound_statementsimple_statement : expression_statement\n                           | assignment_statement\n                           | return_statement\n                           | NEWLINEexpression_statement : expression NEWLINEassignment_statement : ID ASSIGN expression NEWLINEreturn_statement : KEYWORD expression NEWLINE\n                           | KEYWORD NEWLINEcompound_statement : function_def\n                             | if_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN ARROW type COLON NEWLINE INDENT statement_list DEDENT\n                       | KEYWORD ID LPAREN parameter_list RPAREN COLON NEWLINE INDENT statement_list DEDENT\n                       | KEYWORD ID LPAREN RPAREN ARROW type COLON NEWLINE INDENT statement_list DEDENT\n                       | KEYWORD ID LPAREN RPAREN COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n                         | parameter_list COMMA parameterparameter : ID COLON type\n                    | IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n                       | KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTexpression : binary_expressionbinary_expression : unary_expression\n                            | binary_expression PLUS unary_expression\n                            | binary_expression MINUS unary_expression\n                            | binary_expression TIMES unary_expression\n                            | binary_expression DIVIDE unary_expression\n                            | binary_expression MOD unary_expression\n                            | binary_expression EQ unary_expression\n                            | binary_expression NE unary_expression\n                            | binary_expression LT unary_expression\n                            | binary_expression GT unary_expression\n                            | binary_expression LE unary_expression\n                            | binary_expression GE unary_expressionunary_expression : primary_expression\n                           | MINUS unary_expression %prec UMINUSprimary_expression : literal\n                             | ID\n                             | call\n                             | groupliteral : NUMBER\n                  | STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n                | ID LPAREN RPARENarguments : expression\n                     | arguments COMMA expression'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,20,21,22,23,24,25,26,29,30,31,33,45,46,48,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,71,74,79,80,84,89,92,93,95,96,98,99,101,102,103,105,106,107,108,109,110,111,112,113,],[9,9,-2,-4,-5,-6,-7,-8,-9,-14,-15,26,-43,30,-27,-28,-40,-42,-44,-45,-46,-47,-3,-10,50,-13,-43,-43,-41,65,-50,-12,68,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-11,-49,-50,9,88,9,91,-25,97,9,100,9,9,104,9,9,-19,9,-17,9,9,9,-18,9,-16,-26,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,25,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,50,52,65,67,74,75,77,78,80,83,89,93,96,98,101,102,103,105,106,107,108,109,110,111,112,113,],[13,13,-2,-4,-5,-6,-7,-8,-9,-14,-15,31,33,33,-3,-10,33,33,-13,33,33,33,33,33,33,33,33,33,33,33,-12,69,-11,33,13,81,86,81,13,81,-25,13,13,13,13,13,-19,13,-17,13,13,13,-18,13,-16,-26,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,25,26,30,50,65,74,80,89,93,96,98,101,102,103,105,106,107,108,109,110,111,112,113,],[14,14,-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,14,14,94,14,14,14,14,14,-19,14,-17,14,14,14,-18,14,-16,-26,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,50,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,69,71,74,80,89,93,96,98,101,102,103,105,106,107,108,109,110,111,112,113,],[18,18,-2,-4,-5,-6,-7,-8,-9,-14,-15,-43,18,18,35,-28,18,-40,-42,-44,-45,-46,-47,-3,-10,18,18,-13,-43,-43,18,18,18,18,18,18,18,18,18,18,18,-41,-50,-12,18,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-11,-49,18,-43,-50,18,18,-25,18,18,18,18,18,-19,18,-17,18,18,18,-18,18,-16,-26,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,25,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,50,52,65,67,74,80,89,93,96,98,101,102,103,105,106,107,108,109,110,111,112,113,],[23,23,-2,-4,-5,-6,-7,-8,-9,-14,-15,23,23,23,-3,-10,23,23,-13,23,23,23,23,23,23,23,23,23,23,23,-12,23,-11,23,23,23,-25,23,23,23,23,23,-19,23,-17,23,23,23,-18,23,-16,-26,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,25,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,50,52,65,67,74,80,89,93,96,98,101,102,103,105,106,107,108,109,110,111,112,113,],[24,24,-2,-4,-5,-6,-7,-8,-9,-14,-15,24,24,24,-3,-10,24,24,-13,24,24,24,24,24,24,24,24,24,24,24,-12,24,-11,24,24,24,-25,24,24,24,24,24,-19,24,-17,24,24,24,-18,24,-16,-26,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,18,25,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,50,52,65,67,69,74,80,89,93,96,98,101,102,103,105,106,107,108,109,110,111,112,113,],[15,15,-2,-4,-5,-6,-7,-8,-9,-14,-15,28,15,15,15,-3,-10,15,15,-13,52,28,15,15,15,15,15,15,15,15,15,15,15,-12,15,-11,15,28,15,15,-25,15,15,15,15,15,-19,15,-17,15,15,15,-18,15,-16,-26,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,25,26,30,50,65,89,103,106,110,112,113,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,-25,-19,-17,-18,-16,-26,]),'DEDENT':([3,4,5,6,7,8,9,10,11,25,26,30,50,65,80,89,98,101,103,106,107,109,110,111,112,113,],[-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,89,-25,103,106,-19,-17,110,112,-18,113,-16,-26,]),'ASSIGN':([13,],[27,]),'PLUS':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,34,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'TIMES':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,36,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'DIVIDE':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,37,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'MOD':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,38,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'EQ':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,39,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'NE':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,40,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'LT':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,41,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'GT':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,42,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'LE':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,43,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'GE':([13,16,17,19,20,21,22,23,24,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,],[-43,44,-28,-40,-42,-44,-45,-46,-47,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-43,-50,]),'COLON':([16,17,19,20,21,22,23,24,29,31,33,45,48,53,54,55,56,57,58,59,60,61,62,63,64,66,69,71,76,81,86,87,90,94,],[-27,-28,-40,-42,-44,-45,-46,-47,51,-43,-43,-41,-50,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,75,79,84,-24,75,92,95,99,]),'RPAREN':([16,17,19,20,21,22,23,24,28,32,33,45,47,48,49,52,53,54,55,56,57,58,59,60,61,62,63,64,66,69,70,72,73,81,82,85,86,],[-27,-28,-40,-42,-44,-45,-46,-47,48,53,-43,-41,66,-50,-51,71,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-23,76,-20,-52,-24,-22,-21,-23,]),'COMMA':([16,17,19,20,21,22,23,24,33,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,66,69,70,72,73,81,82,85,86,],[-27,-28,-40,-42,-44,-45,-46,-47,-43,-41,67,-50,-51,-48,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-39,-49,-23,77,-20,-52,-24,-22,-21,-23,]),'INDENT':([68,88,91,97,100,104,],[74,93,96,102,105,108,]),'ARROW':([71,76,],[78,83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,74,93,96,102,105,108,],[2,80,98,101,107,109,111,]),'statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[3,25,3,25,3,3,25,25,3,3,25,3,25,25,]),'simple_statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[4,4,4,4,4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,74,80,93,96,98,101,102,105,107,108,109,111,],[11,11,11,11,11,11,11,11,11,11,11,11,11,11,]),'expression':([0,2,14,15,27,28,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[12,12,29,32,46,49,49,73,12,12,12,12,12,12,12,12,12,12,12,12,]),'binary_expression':([0,2,14,15,27,28,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'unary_expression':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[17,17,17,17,45,17,17,54,55,56,57,58,59,60,61,62,63,64,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'primary_expression':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'literal':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'call':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'group':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,52,67,74,80,93,96,98,101,102,105,107,108,109,111,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'arguments':([28,52,],[47,47,]),'parameter_list':([52,],[70,]),'parameter':([52,77,],[72,85,]),'type':([75,78,83,],[82,87,90,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',106),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',110),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',111),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',123),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',124),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',128),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',129),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',130),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',131),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',138),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',142),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',146),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',147),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',155),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',156),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN ARROW type COLON NEWLINE INDENT statement_list DEDENT','function_def',12,'p_function_def','ply_parser.py',160),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN COLON NEWLINE INDENT statement_list DEDENT','function_def',10,'p_function_def','ply_parser.py',161),
  ('function_def -> KEYWORD ID LPAREN RPAREN ARROW type COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',162),
  ('function_def -> KEYWORD ID LPAREN RPAREN COLON NEWLINE INDENT statement_list DEDENT','function_def',9,'p_function_def','ply_parser.py',163),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',190),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',191),
  ('parameter -> ID COLON type','parameter',3,'p_parameter','ply_parser.py',198),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',199),
  ('type -> ID','type',1,'p_type','ply_parser.py',206),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',221),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',222),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',236),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',240),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',241),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',242),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',243),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',244),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',245),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',246),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',247),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',248),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',249),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',250),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',251),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',273),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',274),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',281),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',282),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',283),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',284),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',291),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',292),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',306),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',310),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',311),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',318),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',319),
]
