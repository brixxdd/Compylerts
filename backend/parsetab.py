
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ GE GT ID INDENT KEYWORD LBRACKET LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RBRACKET RPAREN STRING TIMESprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINEassignment_statement : ID ASSIGN expression NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statement\n| for_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON ID\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTfor_statement : KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTexpression : binary_expressionbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| group\n| list_literalliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expression\n| error COMMA\n| arguments COMMA errorreturn_type : ARROW ID\n| emptyempty :list_literal : LBRACKET list_items RBRACKET\n| LBRACKET RBRACKETlist_items : expression\n| list_items COMMA expression'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,17,18,20,21,22,23,24,25,26,28,29,32,33,34,36,48,50,52,54,57,58,61,62,63,64,65,66,67,68,69,70,71,72,73,75,76,87,88,92,100,101,102,105,107,108,109,111,112,113,114,115,],[9,9,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,29,-42,33,-26,-27,-39,-41,-43,-44,-45,-46,-47,-3,-10,57,-13,-42,-42,-40,-59,75,-50,-12,79,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-11,-49,9,93,9,-23,9,106,9,110,-25,9,9,9,-17,9,-24,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,19,27,28,29,30,31,33,37,38,39,40,41,42,43,44,45,46,47,57,59,60,74,75,77,87,89,91,92,96,100,101,105,108,109,111,112,113,114,115,],[14,14,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,34,36,36,36,-3,-10,36,36,-13,36,36,36,36,36,36,36,36,36,36,36,-12,36,81,36,-11,36,14,94,99,14,103,-23,14,14,-25,14,14,14,-17,14,-24,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,12,28,29,33,34,57,75,87,92,100,101,105,108,109,111,112,113,114,115,],[15,15,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,-3,-10,-13,59,-12,-11,15,15,104,15,15,-25,15,15,15,-17,15,-24,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,33,34,36,37,38,39,40,41,42,43,44,45,46,47,48,50,54,57,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,87,92,100,101,105,108,109,111,112,113,114,115,],[19,19,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,-42,19,19,38,-27,19,-39,-41,-43,-44,-45,-46,-47,19,-3,-10,19,19,-13,-42,-42,19,19,19,19,19,19,19,19,19,19,19,-40,-59,-50,-12,19,19,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,19,-11,-49,19,-42,19,19,-23,19,19,-25,19,19,19,-17,19,-24,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,19,27,28,29,30,31,33,37,38,39,40,41,42,43,44,45,46,47,57,59,60,74,75,77,87,92,100,101,105,108,109,111,112,113,114,115,],[25,25,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,25,25,25,25,-3,-10,25,25,-13,25,25,25,25,25,25,25,25,25,25,25,-12,25,25,25,-11,25,25,25,-23,25,25,-25,25,25,25,-17,25,-24,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,19,27,28,29,30,31,33,37,38,39,40,41,42,43,44,45,46,47,57,59,60,74,75,77,87,92,100,101,105,108,109,111,112,113,114,115,],[26,26,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,26,26,26,26,-3,-10,26,26,-13,26,26,26,26,26,26,26,26,26,26,26,-12,26,26,26,-11,26,26,26,-23,26,26,-25,26,26,26,-17,26,-24,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,19,27,28,29,30,31,33,34,36,37,38,39,40,41,42,43,44,45,46,47,57,59,60,74,75,77,81,87,92,100,101,105,108,109,111,112,113,114,115,],[16,16,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,31,16,16,16,16,-3,-10,16,16,-13,60,31,16,16,16,16,16,16,16,16,16,16,16,-12,16,16,16,-11,16,31,16,16,-23,16,16,-25,16,16,16,-17,16,-24,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,15,16,19,27,28,29,30,31,33,37,38,39,40,41,42,43,44,45,46,47,57,59,60,74,75,77,87,92,100,101,105,108,109,111,112,113,114,115,],[27,27,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,27,27,27,27,-3,-10,27,27,-13,27,27,27,27,27,27,27,27,27,27,27,-12,27,27,27,-11,27,27,27,-23,27,27,-25,27,27,27,-17,27,-24,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,28,29,33,57,75,100,108,113,115,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,-3,-10,-13,-12,-11,-23,-25,-17,-24,]),'DEDENT':([3,4,5,6,7,8,9,10,11,12,28,29,33,57,75,92,100,105,108,111,113,114,115,],[-2,-4,-5,-6,-7,-8,-9,-14,-15,-16,-3,-10,-13,-12,-11,100,-23,108,-25,113,-17,115,-24,]),'ASSIGN':([14,],[30,]),'PLUS':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,37,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'TIMES':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,39,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'DIVIDE':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,40,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'MOD':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,41,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'EQ':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,42,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'NE':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,43,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'LT':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,44,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'GT':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,45,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'LE':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,46,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'GE':([14,17,18,20,21,22,23,24,25,26,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,81,],[-42,47,-27,-39,-41,-43,-44,-45,-46,-47,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-42,]),'COLON':([17,18,20,21,22,23,24,25,26,32,34,36,48,50,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,80,81,90,95,97,99,103,104,],[-26,-27,-39,-41,-43,-44,-45,-46,-47,58,-42,-42,-40,-59,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,88,89,-57,102,-56,89,-55,107,]),'RPAREN':([17,18,20,21,22,23,24,25,26,31,35,36,48,50,53,54,55,60,61,62,63,64,65,66,67,68,69,70,71,72,73,76,78,81,82,83,85,86,94,98,99,],[-26,-27,-39,-41,-43,-44,-45,-46,-47,54,61,-42,-40,-59,76,-50,-51,54,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-53,-21,90,-18,-52,-54,-20,-19,-21,]),'RBRACKET':([17,18,20,21,22,23,24,25,26,27,36,48,49,50,51,54,61,62,63,64,65,66,67,68,69,70,71,72,73,76,84,],[-26,-27,-39,-41,-43,-44,-45,-46,-47,50,-42,-40,73,-59,-60,-50,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-61,]),'COMMA':([17,18,20,21,22,23,24,25,26,36,48,49,50,51,53,54,55,56,61,62,63,64,65,66,67,68,69,70,71,72,73,76,78,81,82,83,84,85,86,94,98,99,],[-26,-27,-39,-41,-43,-44,-45,-46,-47,-42,-40,74,-59,-60,77,-50,-51,78,-48,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-38,-58,-49,-53,-21,91,-18,-61,-52,-54,-20,-19,-21,]),'error':([31,60,77,],[56,56,86,]),'INDENT':([79,93,106,110,],[87,101,109,112,]),'ARROW':([90,],[96,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,87,101,109,112,],[2,92,105,111,114,]),'statement':([0,2,87,92,101,105,109,111,112,114,],[3,28,3,28,3,28,3,28,3,28,]),'simple_statement':([0,2,87,92,101,105,109,111,112,114,],[4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,87,92,101,105,109,111,112,114,],[5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,87,92,101,105,109,111,112,114,],[6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,87,92,101,105,109,111,112,114,],[7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,87,92,101,105,109,111,112,114,],[8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,87,92,101,105,109,111,112,114,],[10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,87,92,101,105,109,111,112,114,],[11,11,11,11,11,11,11,11,11,11,]),'for_statement':([0,2,87,92,101,105,109,111,112,114,],[12,12,12,12,12,12,12,12,12,12,]),'expression':([0,2,15,16,27,30,31,59,60,74,77,87,92,101,105,109,111,112,114,],[13,13,32,35,51,52,55,80,55,84,85,13,13,13,13,13,13,13,13,]),'binary_expression':([0,2,15,16,27,30,31,59,60,74,77,87,92,101,105,109,111,112,114,],[17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,]),'unary_expression':([0,2,15,16,19,27,30,31,37,38,39,40,41,42,43,44,45,46,47,59,60,74,77,87,92,101,105,109,111,112,114,],[18,18,18,18,48,18,18,18,62,63,64,65,66,67,68,69,70,71,72,18,18,18,18,18,18,18,18,18,18,18,18,]),'primary_expression':([0,2,15,16,19,27,30,31,37,38,39,40,41,42,43,44,45,46,47,59,60,74,77,87,92,101,105,109,111,112,114,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'literal':([0,2,15,16,19,27,30,31,37,38,39,40,41,42,43,44,45,46,47,59,60,74,77,87,92,101,105,109,111,112,114,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'call':([0,2,15,16,19,27,30,31,37,38,39,40,41,42,43,44,45,46,47,59,60,74,77,87,92,101,105,109,111,112,114,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'group':([0,2,15,16,19,27,30,31,37,38,39,40,41,42,43,44,45,46,47,59,60,74,77,87,92,101,105,109,111,112,114,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'list_literal':([0,2,15,16,19,27,30,31,37,38,39,40,41,42,43,44,45,46,47,59,60,74,77,87,92,101,105,109,111,112,114,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'list_items':([27,],[49,]),'arguments':([31,60,],[53,53,]),'parameter_list':([60,],[82,]),'parameter':([60,91,],[83,98,]),'return_type':([90,],[95,]),'empty':([90,],[97,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',43),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',69),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',70),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',83),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',84),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',89),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',90),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',91),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',92),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',100),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',117),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',133),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',134),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',143),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',144),
  ('compound_statement -> for_statement','compound_statement',1,'p_compound_statement','ply_parser.py',145),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',150),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',181),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',182),
  ('parameter -> ID COLON ID','parameter',3,'p_parameter','ply_parser.py',189),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',190),
  ('type -> ID','type',1,'p_type','ply_parser.py',208),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',224),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',225),
  ('for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','for_statement',9,'p_for_statement','ply_parser.py',238),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',247),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',252),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',253),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',254),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',255),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',256),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',257),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',258),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',259),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',260),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',261),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',262),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',263),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',285),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',286),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',294),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',295),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',296),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',297),
  ('primary_expression -> list_literal','primary_expression',1,'p_primary_expression','ply_parser.py',298),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',306),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',307),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',321),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',326),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',327),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',359),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',360),
  ('arguments -> error COMMA','arguments',2,'p_arguments','ply_parser.py',361),
  ('arguments -> arguments COMMA error','arguments',3,'p_arguments','ply_parser.py',362),
  ('return_type -> ARROW ID','return_type',2,'p_return_type','ply_parser.py',381),
  ('return_type -> empty','return_type',1,'p_return_type','ply_parser.py',382),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',390),
  ('list_literal -> LBRACKET list_items RBRACKET','list_literal',3,'p_list_literal','ply_parser.py',395),
  ('list_literal -> LBRACKET RBRACKET','list_literal',2,'p_list_literal','ply_parser.py',396),
  ('list_items -> expression','list_items',1,'p_list_items','ply_parser.py',404),
  ('list_items -> list_items COMMA expression','list_items',3,'p_list_items','ply_parser.py',405),
]
