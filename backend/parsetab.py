
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ GE GT ID INDENT KEYWORD LBRACKET LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RBRACKET RPAREN STRING TIMES TRAILING_COMMAprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINEassignment_statement : ID ASSIGN expression NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN type_annotation COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON type\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTexpression : binary_expressionbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| group\n| list_literalliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expression\n| error COMMA\n| arguments COMMA errortype_annotation : ARROW ID\n| emptyempty :list_literal : LBRACKET list_items RBRACKET\n| LBRACKET RBRACKETlist_items : expression\n| list_items COMMA expression'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,20,21,22,23,24,25,27,28,31,32,33,35,47,49,51,53,56,57,59,60,61,62,63,64,65,66,67,68,69,70,71,73,74,84,88,96,97,101,102,104,105,106,107,108,],[9,9,-2,-4,-5,-6,-7,-8,-9,-14,-15,28,-40,32,-24,-25,-37,-39,-41,-42,-43,-44,-45,-3,-10,56,-13,-40,-40,-38,-57,73,-48,-12,77,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-11,-47,9,9,-22,100,103,9,9,9,-16,9,-23,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,26,27,28,29,30,32,36,37,38,39,40,41,42,43,44,45,46,56,58,72,73,75,84,85,87,88,92,96,102,104,105,106,107,108,],[13,13,-2,-4,-5,-6,-7,-8,-9,-14,-15,33,35,35,35,-3,-10,35,35,-13,35,35,35,35,35,35,35,35,35,35,35,-12,78,35,-11,35,13,89,95,13,98,-22,13,13,13,-16,13,-23,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,27,28,32,56,73,84,88,96,102,104,105,106,107,108,],[14,14,-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,14,14,99,14,14,14,-16,14,-23,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,47,49,53,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,78,84,88,96,102,104,105,106,107,108,],[18,18,-2,-4,-5,-6,-7,-8,-9,-14,-15,-40,18,18,37,-25,18,-37,-39,-41,-42,-43,-44,-45,18,-3,-10,18,18,-13,-40,-40,18,18,18,18,18,18,18,18,18,18,18,-38,-57,-48,-12,18,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,18,-11,-47,18,-40,18,18,-22,18,18,18,-16,18,-23,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,26,27,28,29,30,32,36,37,38,39,40,41,42,43,44,45,46,56,58,72,73,75,84,88,96,102,104,105,106,107,108,],[24,24,-2,-4,-5,-6,-7,-8,-9,-14,-15,24,24,24,24,-3,-10,24,24,-13,24,24,24,24,24,24,24,24,24,24,24,-12,24,24,-11,24,24,24,-22,24,24,24,-16,24,-23,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,26,27,28,29,30,32,36,37,38,39,40,41,42,43,44,45,46,56,58,72,73,75,84,88,96,102,104,105,106,107,108,],[25,25,-2,-4,-5,-6,-7,-8,-9,-14,-15,25,25,25,25,-3,-10,25,25,-13,25,25,25,25,25,25,25,25,25,25,25,-12,25,25,-11,25,25,25,-22,25,25,25,-16,25,-23,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,18,26,27,28,29,30,32,33,35,36,37,38,39,40,41,42,43,44,45,46,56,58,72,73,75,78,84,88,96,102,104,105,106,107,108,],[15,15,-2,-4,-5,-6,-7,-8,-9,-14,-15,30,15,15,15,15,-3,-10,15,15,-13,58,30,15,15,15,15,15,15,15,15,15,15,15,-12,15,15,-11,15,30,15,15,-22,15,15,15,-16,15,-23,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,26,27,28,29,30,32,36,37,38,39,40,41,42,43,44,45,46,56,58,72,73,75,84,88,96,102,104,105,106,107,108,],[26,26,-2,-4,-5,-6,-7,-8,-9,-14,-15,26,26,26,26,-3,-10,26,26,-13,26,26,26,26,26,26,26,26,26,26,26,-12,26,26,-11,26,26,26,-22,26,26,26,-16,26,-23,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,27,28,32,56,73,96,106,108,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,-22,-16,-23,]),'DEDENT':([3,4,5,6,7,8,9,10,11,27,28,32,56,73,88,96,104,106,107,108,],[-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,96,-22,106,-16,108,-23,]),'ASSIGN':([13,],[29,]),'PLUS':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,36,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'TIMES':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,38,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'DIVIDE':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,39,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'MOD':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,40,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'EQ':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,41,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'NE':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,42,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'LT':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,43,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'GT':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,44,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'LE':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,45,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'GE':([13,16,17,19,20,21,22,23,24,25,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,],[-40,46,-25,-37,-39,-41,-42,-43,-44,-45,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-40,]),'COLON':([16,17,19,20,21,22,23,24,25,31,33,35,47,49,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,78,86,91,93,95,98,99,],[-24,-25,-37,-39,-41,-42,-43,-44,-45,57,-40,-40,-38,-57,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,85,-55,97,-54,85,-53,101,]),'RPAREN':([16,17,19,20,21,22,23,24,25,30,34,35,47,49,52,53,54,58,59,60,61,62,63,64,65,66,67,68,69,70,71,74,76,78,79,80,82,83,89,90,94,95,],[-24,-25,-37,-39,-41,-42,-43,-44,-45,53,59,-40,-38,-57,74,-48,-49,53,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-51,-20,86,-17,-50,-52,-21,-19,-18,-20,]),'RBRACKET':([16,17,19,20,21,22,23,24,25,26,35,47,48,49,50,53,59,60,61,62,63,64,65,66,67,68,69,70,71,74,81,],[-24,-25,-37,-39,-41,-42,-43,-44,-45,49,-40,-38,71,-57,-58,-48,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-59,]),'COMMA':([16,17,19,20,21,22,23,24,25,35,47,48,49,50,52,53,54,55,59,60,61,62,63,64,65,66,67,68,69,70,71,74,76,78,79,80,81,82,83,89,90,94,95,],[-24,-25,-37,-39,-41,-42,-43,-44,-45,-40,-38,72,-57,-58,75,-48,-49,76,-46,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-56,-47,-51,-20,87,-17,-59,-50,-52,-21,-19,-18,-20,]),'error':([30,58,75,],[55,55,83,]),'INDENT':([77,100,103,],[84,102,105,]),'ARROW':([86,],[92,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,84,102,105,],[2,88,104,107,]),'statement':([0,2,84,88,102,104,105,107,],[3,27,3,27,3,27,3,27,]),'simple_statement':([0,2,84,88,102,104,105,107,],[4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,84,88,102,104,105,107,],[5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,84,88,102,104,105,107,],[6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,84,88,102,104,105,107,],[7,7,7,7,7,7,7,7,]),'return_statement':([0,2,84,88,102,104,105,107,],[8,8,8,8,8,8,8,8,]),'function_def':([0,2,84,88,102,104,105,107,],[10,10,10,10,10,10,10,10,]),'if_statement':([0,2,84,88,102,104,105,107,],[11,11,11,11,11,11,11,11,]),'expression':([0,2,14,15,26,29,30,58,72,75,84,88,102,104,105,107,],[12,12,31,34,50,51,54,54,81,82,12,12,12,12,12,12,]),'binary_expression':([0,2,14,15,26,29,30,58,72,75,84,88,102,104,105,107,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'unary_expression':([0,2,14,15,18,26,29,30,36,37,38,39,40,41,42,43,44,45,46,58,72,75,84,88,102,104,105,107,],[17,17,17,17,47,17,17,17,60,61,62,63,64,65,66,67,68,69,70,17,17,17,17,17,17,17,17,17,]),'primary_expression':([0,2,14,15,18,26,29,30,36,37,38,39,40,41,42,43,44,45,46,58,72,75,84,88,102,104,105,107,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'literal':([0,2,14,15,18,26,29,30,36,37,38,39,40,41,42,43,44,45,46,58,72,75,84,88,102,104,105,107,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'call':([0,2,14,15,18,26,29,30,36,37,38,39,40,41,42,43,44,45,46,58,72,75,84,88,102,104,105,107,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'group':([0,2,14,15,18,26,29,30,36,37,38,39,40,41,42,43,44,45,46,58,72,75,84,88,102,104,105,107,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'list_literal':([0,2,14,15,18,26,29,30,36,37,38,39,40,41,42,43,44,45,46,58,72,75,84,88,102,104,105,107,],[23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,]),'list_items':([26,],[48,]),'arguments':([30,58,],[52,52,]),'parameter_list':([58,],[79,]),'parameter':([58,87,],[80,94,]),'type':([85,],[90,]),'type_annotation':([86,],[91,]),'empty':([86,],[93,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',108),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',153),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',154),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',166),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',167),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',171),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',172),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',173),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',174),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',181),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',199),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',216),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',217),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',225),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',226),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN type_annotation COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',230),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',274),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',275),
  ('parameter -> ID COLON type','parameter',3,'p_parameter','ply_parser.py',282),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',283),
  ('type -> ID','type',1,'p_type','ply_parser.py',290),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',305),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',306),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',320),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',324),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',325),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',326),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',327),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',328),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',329),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',330),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',331),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',332),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',333),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',334),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',335),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',357),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',358),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',365),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',366),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',367),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',368),
  ('primary_expression -> list_literal','primary_expression',1,'p_primary_expression','ply_parser.py',369),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',376),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',377),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',390),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',394),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',395),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',430),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',431),
  ('arguments -> error COMMA','arguments',2,'p_arguments','ply_parser.py',432),
  ('arguments -> arguments COMMA error','arguments',3,'p_arguments','ply_parser.py',433),
  ('type_annotation -> ARROW ID','type_annotation',2,'p_type_annotation','ply_parser.py',451),
  ('type_annotation -> empty','type_annotation',1,'p_type_annotation','ply_parser.py',452),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',459),
  ('list_literal -> LBRACKET list_items RBRACKET','list_literal',3,'p_list_literal','ply_parser.py',463),
  ('list_literal -> LBRACKET RBRACKET','list_literal',2,'p_list_literal','ply_parser.py',464),
  ('list_items -> expression','list_items',1,'p_list_items','ply_parser.py',471),
  ('list_items -> list_items COMMA expression','list_items',3,'p_list_items','ply_parser.py',472),
]
