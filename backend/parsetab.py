
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ GE GT ID INDENT KEYWORD LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RPAREN STRING TIMES TRAILING_COMMAprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINEassignment_statement : ID ASSIGN expression NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN type_annotation COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD ID LPAREN RPAREN type_annotation COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON type\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTexpression : binary_expressionbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| groupliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expression\n| error COMMA\n| arguments COMMA errortype_annotation : ARROW ID\n| emptyempty :'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,16,17,19,20,21,22,23,24,25,26,29,30,31,33,45,46,48,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,67,73,77,84,90,92,93,97,98,99,100,102,103,104,105,106,107,],[9,9,-2,-4,-5,-6,-7,-8,-9,-14,-15,26,-41,30,-25,-26,-38,-40,-42,-43,-44,-45,-3,-10,51,-13,-41,-41,-39,66,-48,-12,70,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-11,-47,-48,9,9,94,-23,96,9,101,9,9,9,-17,9,-16,9,-24,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,25,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,51,53,66,68,77,78,80,82,84,92,97,99,100,102,103,104,105,106,107,],[13,13,-2,-4,-5,-6,-7,-8,-9,-14,-15,31,33,33,-3,-10,33,33,-13,33,33,33,33,33,33,33,33,33,33,33,-12,71,-11,33,13,85,89,91,13,-23,13,13,13,13,-17,13,-16,13,-24,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,25,26,30,51,66,77,84,92,97,99,100,102,103,104,105,106,107,],[14,14,-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,14,14,95,14,14,14,14,-17,14,-16,14,-24,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,45,48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,71,73,77,84,92,97,99,100,102,103,104,105,106,107,],[18,18,-2,-4,-5,-6,-7,-8,-9,-14,-15,-41,18,18,35,-26,18,-38,-40,-42,-43,-44,-45,-3,-10,18,18,-13,-41,-41,18,18,18,18,18,18,18,18,18,18,18,-39,-48,-12,18,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-11,-47,18,-41,-48,18,18,-23,18,18,18,18,-17,18,-16,18,-24,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,25,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,51,53,66,68,77,84,92,97,99,100,102,103,104,105,106,107,],[23,23,-2,-4,-5,-6,-7,-8,-9,-14,-15,23,23,23,-3,-10,23,23,-13,23,23,23,23,23,23,23,23,23,23,23,-12,23,-11,23,23,23,-23,23,23,23,23,-17,23,-16,23,-24,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,14,15,18,25,26,27,28,30,34,35,36,37,38,39,40,41,42,43,44,51,53,66,68,77,84,92,97,99,100,102,103,104,105,106,107,],[24,24,-2,-4,-5,-6,-7,-8,-9,-14,-15,24,24,24,-3,-10,24,24,-13,24,24,24,24,24,24,24,24,24,24,24,-12,24,-11,24,24,24,-23,24,24,24,24,-17,24,-16,24,-24,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,13,14,15,18,25,26,27,28,30,31,33,34,35,36,37,38,39,40,41,42,43,44,51,53,66,68,71,77,84,92,97,99,100,102,103,104,105,106,107,],[15,15,-2,-4,-5,-6,-7,-8,-9,-14,-15,28,15,15,15,-3,-10,15,15,-13,53,28,15,15,15,15,15,15,15,15,15,15,15,-12,15,-11,15,28,15,15,-23,15,15,15,15,-17,15,-16,15,-24,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,25,26,30,51,66,92,103,105,107,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,-23,-17,-16,-24,]),'DEDENT':([3,4,5,6,7,8,9,10,11,25,26,30,51,66,84,92,100,102,103,105,106,107,],[-2,-4,-5,-6,-7,-8,-9,-14,-15,-3,-10,-13,-12,-11,92,-23,103,105,-17,-16,107,-24,]),'ASSIGN':([13,],[27,]),'PLUS':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,34,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'TIMES':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,36,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'DIVIDE':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,37,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'MOD':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,38,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'EQ':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,39,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'NE':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,40,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'LT':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,41,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'GT':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,42,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'LE':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,43,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'GE':([13,16,17,19,20,21,22,23,24,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,],[-41,44,-26,-38,-40,-42,-43,-44,-45,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-41,-48,]),'COLON':([16,17,19,20,21,22,23,24,29,31,33,45,48,54,55,56,57,58,59,60,61,62,63,64,65,67,71,73,79,81,83,87,89,91,95,],[-25,-26,-38,-40,-42,-43,-44,-45,52,-41,-41,-39,-48,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,78,-48,-55,90,-54,93,78,-53,98,]),'RPAREN':([16,17,19,20,21,22,23,24,28,32,33,45,47,48,49,53,54,55,56,57,58,59,60,61,62,63,64,65,67,69,71,72,74,75,76,85,86,88,89,],[-25,-26,-38,-40,-42,-43,-44,-45,48,54,-41,-39,67,-48,-49,73,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-51,-21,79,-18,-50,-52,-22,-20,-19,-21,]),'COMMA':([16,17,19,20,21,22,23,24,33,45,47,48,49,50,54,55,56,57,58,59,60,61,62,63,64,65,67,69,71,72,74,75,76,85,86,88,89,],[-25,-26,-38,-40,-42,-43,-44,-45,-41,-39,68,-48,-49,69,-46,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-37,-47,-51,-21,80,-18,-50,-52,-22,-20,-19,-21,]),'error':([28,53,68,],[50,50,76,]),'INDENT':([70,94,96,101,],[77,97,99,104,]),'ARROW':([73,79,],[82,82,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,77,97,99,104,],[2,84,100,102,106,]),'statement':([0,2,77,84,97,99,100,102,104,106,],[3,25,3,25,3,3,25,25,3,25,]),'simple_statement':([0,2,77,84,97,99,100,102,104,106,],[4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,77,84,97,99,100,102,104,106,],[5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,77,84,97,99,100,102,104,106,],[6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,77,84,97,99,100,102,104,106,],[7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,77,84,97,99,100,102,104,106,],[8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,77,84,97,99,100,102,104,106,],[10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,77,84,97,99,100,102,104,106,],[11,11,11,11,11,11,11,11,11,11,]),'expression':([0,2,14,15,27,28,53,68,77,84,97,99,100,102,104,106,],[12,12,29,32,46,49,49,75,12,12,12,12,12,12,12,12,]),'binary_expression':([0,2,14,15,27,28,53,68,77,84,97,99,100,102,104,106,],[16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,]),'unary_expression':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,53,68,77,84,97,99,100,102,104,106,],[17,17,17,17,45,17,17,55,56,57,58,59,60,61,62,63,64,65,17,17,17,17,17,17,17,17,17,17,]),'primary_expression':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,53,68,77,84,97,99,100,102,104,106,],[19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,19,]),'literal':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,53,68,77,84,97,99,100,102,104,106,],[20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,]),'call':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,53,68,77,84,97,99,100,102,104,106,],[21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,]),'group':([0,2,14,15,18,27,28,34,35,36,37,38,39,40,41,42,43,44,53,68,77,84,97,99,100,102,104,106,],[22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,22,]),'arguments':([28,53,],[47,47,]),'parameter_list':([53,],[72,]),'parameter':([53,80,],[74,88,]),'type_annotation':([73,79,],[81,87,]),'empty':([73,79,],[83,83,]),'type':([78,],[86,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',105),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',109),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',110),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',122),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',123),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',127),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',128),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',129),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',130),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',137),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',141),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',145),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',146),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',154),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',155),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN type_annotation COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',159),
  ('function_def -> KEYWORD ID LPAREN RPAREN type_annotation COLON NEWLINE INDENT statement_list DEDENT','function_def',10,'p_function_def','ply_parser.py',160),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',169),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',170),
  ('parameter -> ID COLON type','parameter',3,'p_parameter','ply_parser.py',177),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',178),
  ('type -> ID','type',1,'p_type','ply_parser.py',185),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',200),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',201),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',215),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',219),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',220),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',221),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',222),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',223),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',224),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',225),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',226),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',227),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',228),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',229),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',230),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',252),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',253),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',260),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',261),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',262),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',263),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',270),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',271),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',285),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',289),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',290),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',324),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',325),
  ('arguments -> error COMMA','arguments',2,'p_arguments','ply_parser.py',326),
  ('arguments -> arguments COMMA error','arguments',3,'p_arguments','ply_parser.py',327),
  ('type_annotation -> ARROW ID','type_annotation',2,'p_type_annotation','ply_parser.py',345),
  ('type_annotation -> empty','type_annotation',1,'p_type_annotation','ply_parser.py',346),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',353),
]
