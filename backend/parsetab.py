
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftEQNEleftLTGTLEGEleftPLUSMINUSleftTIMESDIVIDEMODrightUMINUSARROW ASSIGN COLON COMMA DEDENT DIVIDE EQ FSTRING GE GT ID INDENT KEYWORD LBRACKET LE LPAREN LT MINUS MOD NE NEWLINE NUMBER PLUS RBRACKET RPAREN STRING TIMESprogram : statement_liststatement_list : statement\n| statement_list statementstatement : simple_statement\n| compound_statementsimple_statement : expression_statement\n| assignment_statement\n| return_statement\n| NEWLINEexpression_statement : expression NEWLINEassignment_statement : ID ASSIGN expression NEWLINE\n| ID ASSIGN list_literal NEWLINEreturn_statement : KEYWORD expression NEWLINE\n| KEYWORD NEWLINEcompound_statement : function_def\n| if_statement\n| for_statementfunction_def : KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENTparameter_list : parameter\n| parameter_list COMMA parameterparameter : ID COLON ID\n| IDtype : IDif_statement : KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT\n| KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENTfor_statement : KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENTexpression : binary_expression\n| primary_expression\n| NUMBER\n| list_literal\n| FSTRINGbinary_expression : unary_expression\n| binary_expression PLUS unary_expression\n| binary_expression MINUS unary_expression\n| binary_expression TIMES unary_expression\n| binary_expression DIVIDE unary_expression\n| binary_expression MOD unary_expression\n| binary_expression EQ unary_expression\n| binary_expression NE unary_expression\n| binary_expression LT unary_expression\n| binary_expression GT unary_expression\n| binary_expression LE unary_expression\n| binary_expression GE unary_expressionunary_expression : primary_expression\n| MINUS unary_expression %prec UMINUSprimary_expression : literal\n| ID\n| call\n| group\n| list_literalliteral : NUMBER\n| STRINGgroup : LPAREN expression RPARENcall : ID LPAREN arguments RPAREN\n| ID LPAREN RPARENarguments : expression\n| arguments COMMA expressionreturn_type : ARROW ID\n| emptyempty :list_literal : LBRACKET list_items RBRACKETlist_items : expression\n| list_items COMMA expression\n| empty'
    
_lr_action_items = {'NEWLINE':([0,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,24,25,26,28,29,30,33,34,35,37,49,50,51,52,56,57,59,61,62,65,66,67,68,69,70,71,72,73,74,75,76,77,79,80,81,90,91,95,103,104,105,108,110,111,112,114,115,116,117,118,],[9,9,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,30,-47,-30,34,-27,-28,-29,-31,-32,-46,-48,-49,-52,-3,-10,61,-14,-47,-47,-45,-44,-50,-51,79,80,-55,-13,83,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-11,-12,-54,9,96,9,-24,9,109,9,113,-26,9,9,9,-18,9,-25,]),'ID':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,23,27,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,61,63,64,78,79,80,82,90,92,94,95,99,103,104,108,111,112,114,115,116,117,118,],[14,14,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,35,37,37,37,-3,-10,37,37,-14,37,37,37,37,37,37,37,37,37,37,37,-13,37,85,37,-11,-12,37,14,97,102,14,106,-24,14,14,-26,14,14,14,-18,14,-25,]),'KEYWORD':([0,2,3,4,5,6,7,8,9,10,11,12,29,30,34,35,61,79,80,90,95,103,104,108,111,112,114,115,116,117,118,],[16,16,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-3,-10,-14,63,-13,-11,-12,16,16,107,16,16,-26,16,16,16,-18,16,-25,]),'NUMBER':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,23,27,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,61,63,64,78,79,80,82,90,95,103,104,108,111,112,114,115,116,117,118,],[20,20,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,20,20,52,20,-3,-10,20,20,-14,52,52,52,52,52,52,52,52,52,52,52,-13,20,20,20,-11,-12,20,20,20,-24,20,20,-26,20,20,20,-18,20,-25,]),'FSTRING':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,27,29,30,31,32,34,61,63,64,78,79,80,82,90,95,103,104,108,111,112,114,115,116,117,118,],[21,21,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,21,21,21,-3,-10,21,21,-14,-13,21,21,21,-11,-12,21,21,21,-24,21,21,-26,21,21,21,-18,21,-25,]),'LBRACKET':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,23,27,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,61,63,64,78,79,80,82,90,95,103,104,108,111,112,114,115,116,117,118,],[27,27,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,27,27,27,27,-3,-10,27,27,-14,27,27,27,27,27,27,27,27,27,27,27,-13,27,27,27,-11,-12,27,27,27,-24,27,27,-26,27,27,27,-18,27,-25,]),'MINUS':([0,2,3,4,5,6,7,8,9,10,11,12,14,15,16,17,18,19,20,22,23,24,25,26,27,28,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,57,59,61,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,85,90,95,103,104,108,111,112,114,115,116,117,118,],[23,23,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-47,-50,23,23,39,-44,-51,-32,23,-46,-48,-49,23,-52,-3,-10,23,23,-14,-47,-47,23,23,23,23,23,23,23,23,23,23,23,-45,-44,-50,-51,-50,-55,-13,23,23,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,23,-11,-12,-54,23,-47,23,23,-24,23,23,-26,23,23,23,-18,23,-25,]),'STRING':([0,2,3,4,5,6,7,8,9,10,11,12,16,17,23,27,29,30,31,32,34,38,39,40,41,42,43,44,45,46,47,48,61,63,64,78,79,80,82,90,95,103,104,108,111,112,114,115,116,117,118,],[28,28,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,28,28,28,28,-3,-10,28,28,-14,28,28,28,28,28,28,28,28,28,28,28,-13,28,28,28,-11,-12,28,28,28,-24,28,28,-26,28,28,28,-18,28,-25,]),'LPAREN':([0,2,3,4,5,6,7,8,9,10,11,12,14,16,17,23,27,29,30,31,32,34,35,37,38,39,40,41,42,43,44,45,46,47,48,61,63,64,78,79,80,82,85,90,95,103,104,108,111,112,114,115,116,117,118,],[17,17,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,32,17,17,17,17,-3,-10,17,17,-14,64,32,17,17,17,17,17,17,17,17,17,17,17,-13,17,17,17,-11,-12,17,32,17,17,-24,17,17,-26,17,17,17,-18,17,-25,]),'$end':([1,2,3,4,5,6,7,8,9,10,11,12,29,30,34,61,79,80,103,111,116,118,],[0,-1,-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-3,-10,-14,-13,-11,-12,-24,-26,-18,-25,]),'DEDENT':([3,4,5,6,7,8,9,10,11,12,29,30,34,61,79,80,95,103,108,111,114,116,117,118,],[-2,-4,-5,-6,-7,-8,-9,-15,-16,-17,-3,-10,-14,-13,-11,-12,103,-24,111,-26,116,-18,118,-25,]),'ASSIGN':([14,],[31,]),'PLUS':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,38,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'TIMES':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,40,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'DIVIDE':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,41,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'MOD':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,42,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'EQ':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,43,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'NE':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,44,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'LT':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,45,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'GT':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,46,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'LE':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,47,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'GE':([14,15,18,19,20,22,24,25,26,28,35,37,49,50,51,52,57,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,],[-47,-50,48,-44,-51,-32,-46,-48,-49,-52,-47,-47,-45,-44,-50,-51,-50,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-47,]),'COLON':([15,18,19,20,21,22,24,25,26,28,33,35,37,49,50,51,52,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,84,85,93,98,100,102,106,107,],[-30,-27,-28,-29,-31,-32,-46,-48,-49,-52,62,-47,-47,-45,-44,-50,-51,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,91,92,-60,105,-59,92,-58,110,]),'RPAREN':([15,18,19,20,21,22,24,25,26,28,32,36,37,49,50,51,52,58,59,60,64,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,86,87,89,97,101,102,],[-30,-27,-28,-29,-31,-32,-46,-48,-49,-52,59,65,-47,-45,-44,-50,-51,81,-55,-56,59,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-22,93,-19,-57,-21,-20,-22,]),'RBRACKET':([15,18,19,20,21,22,24,25,26,27,28,37,49,50,51,52,53,54,55,59,65,66,67,68,69,70,71,72,73,74,75,76,77,81,88,],[-30,-27,-28,-29,-31,-32,-46,-48,-49,-60,-52,-47,-45,-44,-50,-51,77,-62,-64,-55,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-63,]),'COMMA':([15,18,19,20,21,22,24,25,26,27,28,37,49,50,51,52,53,54,55,58,59,60,65,66,67,68,69,70,71,72,73,74,75,76,77,81,85,86,87,88,89,97,101,102,],[-30,-27,-28,-29,-31,-32,-46,-48,-49,-60,-52,-47,-45,-44,-50,-51,78,-62,-64,82,-55,-56,-53,-33,-34,-35,-36,-37,-38,-39,-40,-41,-42,-43,-61,-54,-22,94,-19,-63,-57,-21,-20,-22,]),'INDENT':([83,96,109,113,],[90,104,112,115,]),'ARROW':([93,],[99,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'statement_list':([0,90,104,112,115,],[2,95,108,114,117,]),'statement':([0,2,90,95,104,108,112,114,115,117,],[3,29,3,29,3,29,3,29,3,29,]),'simple_statement':([0,2,90,95,104,108,112,114,115,117,],[4,4,4,4,4,4,4,4,4,4,]),'compound_statement':([0,2,90,95,104,108,112,114,115,117,],[5,5,5,5,5,5,5,5,5,5,]),'expression_statement':([0,2,90,95,104,108,112,114,115,117,],[6,6,6,6,6,6,6,6,6,6,]),'assignment_statement':([0,2,90,95,104,108,112,114,115,117,],[7,7,7,7,7,7,7,7,7,7,]),'return_statement':([0,2,90,95,104,108,112,114,115,117,],[8,8,8,8,8,8,8,8,8,8,]),'function_def':([0,2,90,95,104,108,112,114,115,117,],[10,10,10,10,10,10,10,10,10,10,]),'if_statement':([0,2,90,95,104,108,112,114,115,117,],[11,11,11,11,11,11,11,11,11,11,]),'for_statement':([0,2,90,95,104,108,112,114,115,117,],[12,12,12,12,12,12,12,12,12,12,]),'expression':([0,2,16,17,27,31,32,63,64,78,82,90,95,104,108,112,114,115,117,],[13,13,33,36,54,56,60,84,60,88,89,13,13,13,13,13,13,13,13,]),'list_literal':([0,2,16,17,23,27,31,32,38,39,40,41,42,43,44,45,46,47,48,63,64,78,82,90,95,104,108,112,114,115,117,],[15,15,15,15,51,15,57,15,51,51,51,51,51,51,51,51,51,51,51,15,15,15,15,15,15,15,15,15,15,15,15,]),'binary_expression':([0,2,16,17,27,31,32,63,64,78,82,90,95,104,108,112,114,115,117,],[18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,]),'primary_expression':([0,2,16,17,23,27,31,32,38,39,40,41,42,43,44,45,46,47,48,63,64,78,82,90,95,104,108,112,114,115,117,],[19,19,19,19,50,19,19,19,50,50,50,50,50,50,50,50,50,50,50,19,19,19,19,19,19,19,19,19,19,19,19,]),'unary_expression':([0,2,16,17,23,27,31,32,38,39,40,41,42,43,44,45,46,47,48,63,64,78,82,90,95,104,108,112,114,115,117,],[22,22,22,22,49,22,22,22,66,67,68,69,70,71,72,73,74,75,76,22,22,22,22,22,22,22,22,22,22,22,22,]),'literal':([0,2,16,17,23,27,31,32,38,39,40,41,42,43,44,45,46,47,48,63,64,78,82,90,95,104,108,112,114,115,117,],[24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'call':([0,2,16,17,23,27,31,32,38,39,40,41,42,43,44,45,46,47,48,63,64,78,82,90,95,104,108,112,114,115,117,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'group':([0,2,16,17,23,27,31,32,38,39,40,41,42,43,44,45,46,47,48,63,64,78,82,90,95,104,108,112,114,115,117,],[26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'list_items':([27,],[53,]),'empty':([27,93,],[55,100,]),'arguments':([32,64,],[58,58,]),'parameter_list':([64,],[86,]),'parameter':([64,94,],[87,101,]),'return_type':([93,],[98,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> statement_list','program',1,'p_program','ply_parser.py',43),
  ('statement_list -> statement','statement_list',1,'p_statement_list','ply_parser.py',69),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','ply_parser.py',70),
  ('statement -> simple_statement','statement',1,'p_statement','ply_parser.py',83),
  ('statement -> compound_statement','statement',1,'p_statement','ply_parser.py',84),
  ('simple_statement -> expression_statement','simple_statement',1,'p_simple_statement','ply_parser.py',89),
  ('simple_statement -> assignment_statement','simple_statement',1,'p_simple_statement','ply_parser.py',90),
  ('simple_statement -> return_statement','simple_statement',1,'p_simple_statement','ply_parser.py',91),
  ('simple_statement -> NEWLINE','simple_statement',1,'p_simple_statement','ply_parser.py',92),
  ('expression_statement -> expression NEWLINE','expression_statement',2,'p_expression_statement','ply_parser.py',100),
  ('assignment_statement -> ID ASSIGN expression NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',117),
  ('assignment_statement -> ID ASSIGN list_literal NEWLINE','assignment_statement',4,'p_assignment_statement','ply_parser.py',118),
  ('return_statement -> KEYWORD expression NEWLINE','return_statement',3,'p_return_statement','ply_parser.py',135),
  ('return_statement -> KEYWORD NEWLINE','return_statement',2,'p_return_statement','ply_parser.py',136),
  ('compound_statement -> function_def','compound_statement',1,'p_compound_statement','ply_parser.py',145),
  ('compound_statement -> if_statement','compound_statement',1,'p_compound_statement','ply_parser.py',146),
  ('compound_statement -> for_statement','compound_statement',1,'p_compound_statement','ply_parser.py',147),
  ('function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT','function_def',11,'p_function_def','ply_parser.py',152),
  ('parameter_list -> parameter','parameter_list',1,'p_parameter_list','ply_parser.py',183),
  ('parameter_list -> parameter_list COMMA parameter','parameter_list',3,'p_parameter_list','ply_parser.py',184),
  ('parameter -> ID COLON ID','parameter',3,'p_parameter','ply_parser.py',191),
  ('parameter -> ID','parameter',1,'p_parameter','ply_parser.py',192),
  ('type -> ID','type',1,'p_type','ply_parser.py',210),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','if_statement',7,'p_if_statement','ply_parser.py',226),
  ('if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT','if_statement',13,'p_if_statement','ply_parser.py',227),
  ('for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT','for_statement',9,'p_for_statement','ply_parser.py',243),
  ('expression -> binary_expression','expression',1,'p_expression','ply_parser.py',252),
  ('expression -> primary_expression','expression',1,'p_expression','ply_parser.py',253),
  ('expression -> NUMBER','expression',1,'p_expression','ply_parser.py',254),
  ('expression -> list_literal','expression',1,'p_expression','ply_parser.py',255),
  ('expression -> FSTRING','expression',1,'p_expression','ply_parser.py',256),
  ('binary_expression -> unary_expression','binary_expression',1,'p_binary_expression','ply_parser.py',268),
  ('binary_expression -> binary_expression PLUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',269),
  ('binary_expression -> binary_expression MINUS unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',270),
  ('binary_expression -> binary_expression TIMES unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',271),
  ('binary_expression -> binary_expression DIVIDE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',272),
  ('binary_expression -> binary_expression MOD unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',273),
  ('binary_expression -> binary_expression EQ unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',274),
  ('binary_expression -> binary_expression NE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',275),
  ('binary_expression -> binary_expression LT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',276),
  ('binary_expression -> binary_expression GT unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',277),
  ('binary_expression -> binary_expression LE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',278),
  ('binary_expression -> binary_expression GE unary_expression','binary_expression',3,'p_binary_expression','ply_parser.py',279),
  ('unary_expression -> primary_expression','unary_expression',1,'p_unary_expression','ply_parser.py',301),
  ('unary_expression -> MINUS unary_expression','unary_expression',2,'p_unary_expression','ply_parser.py',302),
  ('primary_expression -> literal','primary_expression',1,'p_primary_expression','ply_parser.py',310),
  ('primary_expression -> ID','primary_expression',1,'p_primary_expression','ply_parser.py',311),
  ('primary_expression -> call','primary_expression',1,'p_primary_expression','ply_parser.py',312),
  ('primary_expression -> group','primary_expression',1,'p_primary_expression','ply_parser.py',313),
  ('primary_expression -> list_literal','primary_expression',1,'p_primary_expression','ply_parser.py',314),
  ('literal -> NUMBER','literal',1,'p_literal','ply_parser.py',322),
  ('literal -> STRING','literal',1,'p_literal','ply_parser.py',323),
  ('group -> LPAREN expression RPAREN','group',3,'p_group','ply_parser.py',339),
  ('call -> ID LPAREN arguments RPAREN','call',4,'p_call','ply_parser.py',344),
  ('call -> ID LPAREN RPAREN','call',3,'p_call','ply_parser.py',345),
  ('arguments -> expression','arguments',1,'p_arguments','ply_parser.py',389),
  ('arguments -> arguments COMMA expression','arguments',3,'p_arguments','ply_parser.py',390),
  ('return_type -> ARROW ID','return_type',2,'p_return_type','ply_parser.py',398),
  ('return_type -> empty','return_type',1,'p_return_type','ply_parser.py',399),
  ('empty -> <empty>','empty',0,'p_empty','ply_parser.py',407),
  ('list_literal -> LBRACKET list_items RBRACKET','list_literal',3,'p_list_literal','ply_parser.py',412),
  ('list_items -> expression','list_items',1,'p_list_items','ply_parser.py',417),
  ('list_items -> list_items COMMA expression','list_items',3,'p_list_items','ply_parser.py',418),
  ('list_items -> empty','list_items',1,'p_list_items','ply_parser.py',419),
]
