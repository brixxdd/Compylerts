Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> simple_statement
Rule 5     statement -> compound_statement
Rule 6     simple_statement -> expression_statement
Rule 7     simple_statement -> assignment_statement
Rule 8     simple_statement -> return_statement
Rule 9     simple_statement -> NEWLINE
Rule 10    expression_statement -> expression NEWLINE
Rule 11    expression_statement -> call NEWLINE
Rule 12    expression_statement -> ID LPAREN arguments RPAREN NEWLINE
Rule 13    expression_statement -> ID LPAREN RPAREN NEWLINE
Rule 14    assignment_statement -> ID ASSIGN expression NEWLINE
Rule 15    assignment_statement -> ID ASSIGN list_literal NEWLINE
Rule 16    return_statement -> KEYWORD expression NEWLINE
Rule 17    return_statement -> KEYWORD NEWLINE
Rule 18    compound_statement -> function_def
Rule 19    compound_statement -> if_statement
Rule 20    compound_statement -> for_statement
Rule 21    compound_statement -> while_statement
Rule 22    function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
Rule 23    parameter_list -> parameter
Rule 24    parameter_list -> parameter_list COMMA parameter
Rule 25    parameter -> ID COLON ID
Rule 26    parameter -> ID
Rule 27    type -> ID
Rule 28    if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
Rule 29    if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
Rule 30    for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
Rule 31    while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
Rule 32    expression -> STRING
Rule 33    expression -> binary_expression
Rule 34    expression -> primary_expression
Rule 35    expression -> NUMBER
Rule 36    expression -> list_literal
Rule 37    expression -> FSTRING
Rule 38    binary_expression -> unary_expression
Rule 39    binary_expression -> binary_expression PLUS unary_expression
Rule 40    binary_expression -> binary_expression MINUS unary_expression
Rule 41    binary_expression -> binary_expression TIMES unary_expression
Rule 42    binary_expression -> binary_expression DIVIDE unary_expression
Rule 43    binary_expression -> binary_expression MOD unary_expression
Rule 44    binary_expression -> binary_expression EQ unary_expression
Rule 45    binary_expression -> binary_expression NE unary_expression
Rule 46    binary_expression -> binary_expression LT unary_expression
Rule 47    binary_expression -> binary_expression GT unary_expression
Rule 48    binary_expression -> binary_expression LE unary_expression
Rule 49    binary_expression -> binary_expression GE unary_expression
Rule 50    unary_expression -> primary_expression
Rule 51    unary_expression -> MINUS unary_expression
Rule 52    primary_expression -> literal
Rule 53    primary_expression -> ID
Rule 54    primary_expression -> call
Rule 55    primary_expression -> group
Rule 56    primary_expression -> list_literal
Rule 57    literal -> NUMBER
Rule 58    literal -> STRING
Rule 59    group -> LPAREN expression RPAREN
Rule 60    call -> ID LPAREN arguments RPAREN
Rule 61    call -> ID LPAREN RPAREN
Rule 62    arguments -> expression
Rule 63    arguments -> arguments COMMA expression
Rule 64    arguments -> STRING
Rule 65    arguments -> arguments COMMA STRING
Rule 66    arguments -> arguments COMMA
Rule 67    return_type -> ARROW ID
Rule 68    return_type -> empty
Rule 69    empty -> <empty>
Rule 70    list_literal -> LBRACKET list_items RBRACKET
Rule 71    list_items -> expression
Rule 72    list_items -> list_items COMMA expression
Rule 73    list_items -> empty

Terminals, with rules where they appear

ARROW                : 67
ASSIGN               : 14 15
COLON                : 22 25 28 29 29 30 31
COMMA                : 24 63 65 66 72
DEDENT               : 22 28 29 29 30 31
DIVIDE               : 42
EQ                   : 44
FSTRING              : 37
GE                   : 49
GT                   : 47
ID                   : 12 13 14 15 22 25 25 26 27 30 53 60 61 67
INDENT               : 22 28 29 29 30 31
KEYWORD              : 16 17 22 28 29 29 30 30 31
LBRACKET             : 70
LE                   : 48
LPAREN               : 12 13 22 59 60 61
LT                   : 46
MINUS                : 40 51
MOD                  : 43
NE                   : 45
NEWLINE              : 9 10 11 12 13 14 15 16 17 22 28 29 29 30 31
NUMBER               : 35 57
PLUS                 : 39
RBRACKET             : 70
RPAREN               : 12 13 22 59 60 61
STRING               : 32 58 64 65
TIMES                : 41
error                : 

Nonterminals, with rules where they appear

arguments            : 12 60 63 65 66
assignment_statement : 7
binary_expression    : 33 39 40 41 42 43 44 45 46 47 48 49
call                 : 11 54
compound_statement   : 5
empty                : 68 73
expression           : 10 14 16 28 29 30 31 59 62 63 71 72
expression_statement : 6
for_statement        : 20
function_def         : 18
group                : 55
if_statement         : 19
list_items           : 70 72
list_literal         : 15 36 56
literal              : 52
parameter            : 23 24
parameter_list       : 22 24
primary_expression   : 34 50
program              : 0
return_statement     : 8
return_type          : 22
simple_statement     : 4
statement            : 2 3
statement_list       : 1 3 22 28 29 29 30 31
type                 : 
unary_expression     : 38 39 40 41 42 43 44 45 46 47 48 49 51
while_statement      : 21

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    expression                     shift and go to state 14
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    $end            reduce using rule 1 (program -> statement_list .)
    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    statement                      shift and go to state 30
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    expression                     shift and go to state 14
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 3

    (2) statement_list -> statement .

    NEWLINE         reduce using rule 2 (statement_list -> statement .)
    ID              reduce using rule 2 (statement_list -> statement .)
    KEYWORD         reduce using rule 2 (statement_list -> statement .)
    STRING          reduce using rule 2 (statement_list -> statement .)
    NUMBER          reduce using rule 2 (statement_list -> statement .)
    FSTRING         reduce using rule 2 (statement_list -> statement .)
    LBRACKET        reduce using rule 2 (statement_list -> statement .)
    MINUS           reduce using rule 2 (statement_list -> statement .)
    LPAREN          reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    DEDENT          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> simple_statement .

    NEWLINE         reduce using rule 4 (statement -> simple_statement .)
    ID              reduce using rule 4 (statement -> simple_statement .)
    KEYWORD         reduce using rule 4 (statement -> simple_statement .)
    STRING          reduce using rule 4 (statement -> simple_statement .)
    NUMBER          reduce using rule 4 (statement -> simple_statement .)
    FSTRING         reduce using rule 4 (statement -> simple_statement .)
    LBRACKET        reduce using rule 4 (statement -> simple_statement .)
    MINUS           reduce using rule 4 (statement -> simple_statement .)
    LPAREN          reduce using rule 4 (statement -> simple_statement .)
    $end            reduce using rule 4 (statement -> simple_statement .)
    DEDENT          reduce using rule 4 (statement -> simple_statement .)


state 5

    (5) statement -> compound_statement .

    NEWLINE         reduce using rule 5 (statement -> compound_statement .)
    ID              reduce using rule 5 (statement -> compound_statement .)
    KEYWORD         reduce using rule 5 (statement -> compound_statement .)
    STRING          reduce using rule 5 (statement -> compound_statement .)
    NUMBER          reduce using rule 5 (statement -> compound_statement .)
    FSTRING         reduce using rule 5 (statement -> compound_statement .)
    LBRACKET        reduce using rule 5 (statement -> compound_statement .)
    MINUS           reduce using rule 5 (statement -> compound_statement .)
    LPAREN          reduce using rule 5 (statement -> compound_statement .)
    $end            reduce using rule 5 (statement -> compound_statement .)
    DEDENT          reduce using rule 5 (statement -> compound_statement .)


state 6

    (6) simple_statement -> expression_statement .

    NEWLINE         reduce using rule 6 (simple_statement -> expression_statement .)
    ID              reduce using rule 6 (simple_statement -> expression_statement .)
    KEYWORD         reduce using rule 6 (simple_statement -> expression_statement .)
    STRING          reduce using rule 6 (simple_statement -> expression_statement .)
    NUMBER          reduce using rule 6 (simple_statement -> expression_statement .)
    FSTRING         reduce using rule 6 (simple_statement -> expression_statement .)
    LBRACKET        reduce using rule 6 (simple_statement -> expression_statement .)
    MINUS           reduce using rule 6 (simple_statement -> expression_statement .)
    LPAREN          reduce using rule 6 (simple_statement -> expression_statement .)
    $end            reduce using rule 6 (simple_statement -> expression_statement .)
    DEDENT          reduce using rule 6 (simple_statement -> expression_statement .)


state 7

    (7) simple_statement -> assignment_statement .

    NEWLINE         reduce using rule 7 (simple_statement -> assignment_statement .)
    ID              reduce using rule 7 (simple_statement -> assignment_statement .)
    KEYWORD         reduce using rule 7 (simple_statement -> assignment_statement .)
    STRING          reduce using rule 7 (simple_statement -> assignment_statement .)
    NUMBER          reduce using rule 7 (simple_statement -> assignment_statement .)
    FSTRING         reduce using rule 7 (simple_statement -> assignment_statement .)
    LBRACKET        reduce using rule 7 (simple_statement -> assignment_statement .)
    MINUS           reduce using rule 7 (simple_statement -> assignment_statement .)
    LPAREN          reduce using rule 7 (simple_statement -> assignment_statement .)
    $end            reduce using rule 7 (simple_statement -> assignment_statement .)
    DEDENT          reduce using rule 7 (simple_statement -> assignment_statement .)


state 8

    (8) simple_statement -> return_statement .

    NEWLINE         reduce using rule 8 (simple_statement -> return_statement .)
    ID              reduce using rule 8 (simple_statement -> return_statement .)
    KEYWORD         reduce using rule 8 (simple_statement -> return_statement .)
    STRING          reduce using rule 8 (simple_statement -> return_statement .)
    NUMBER          reduce using rule 8 (simple_statement -> return_statement .)
    FSTRING         reduce using rule 8 (simple_statement -> return_statement .)
    LBRACKET        reduce using rule 8 (simple_statement -> return_statement .)
    MINUS           reduce using rule 8 (simple_statement -> return_statement .)
    LPAREN          reduce using rule 8 (simple_statement -> return_statement .)
    $end            reduce using rule 8 (simple_statement -> return_statement .)
    DEDENT          reduce using rule 8 (simple_statement -> return_statement .)


state 9

    (9) simple_statement -> NEWLINE .

    NEWLINE         reduce using rule 9 (simple_statement -> NEWLINE .)
    ID              reduce using rule 9 (simple_statement -> NEWLINE .)
    KEYWORD         reduce using rule 9 (simple_statement -> NEWLINE .)
    STRING          reduce using rule 9 (simple_statement -> NEWLINE .)
    NUMBER          reduce using rule 9 (simple_statement -> NEWLINE .)
    FSTRING         reduce using rule 9 (simple_statement -> NEWLINE .)
    LBRACKET        reduce using rule 9 (simple_statement -> NEWLINE .)
    MINUS           reduce using rule 9 (simple_statement -> NEWLINE .)
    LPAREN          reduce using rule 9 (simple_statement -> NEWLINE .)
    $end            reduce using rule 9 (simple_statement -> NEWLINE .)
    DEDENT          reduce using rule 9 (simple_statement -> NEWLINE .)


state 10

    (18) compound_statement -> function_def .

    NEWLINE         reduce using rule 18 (compound_statement -> function_def .)
    ID              reduce using rule 18 (compound_statement -> function_def .)
    KEYWORD         reduce using rule 18 (compound_statement -> function_def .)
    STRING          reduce using rule 18 (compound_statement -> function_def .)
    NUMBER          reduce using rule 18 (compound_statement -> function_def .)
    FSTRING         reduce using rule 18 (compound_statement -> function_def .)
    LBRACKET        reduce using rule 18 (compound_statement -> function_def .)
    MINUS           reduce using rule 18 (compound_statement -> function_def .)
    LPAREN          reduce using rule 18 (compound_statement -> function_def .)
    $end            reduce using rule 18 (compound_statement -> function_def .)
    DEDENT          reduce using rule 18 (compound_statement -> function_def .)


state 11

    (19) compound_statement -> if_statement .

    NEWLINE         reduce using rule 19 (compound_statement -> if_statement .)
    ID              reduce using rule 19 (compound_statement -> if_statement .)
    KEYWORD         reduce using rule 19 (compound_statement -> if_statement .)
    STRING          reduce using rule 19 (compound_statement -> if_statement .)
    NUMBER          reduce using rule 19 (compound_statement -> if_statement .)
    FSTRING         reduce using rule 19 (compound_statement -> if_statement .)
    LBRACKET        reduce using rule 19 (compound_statement -> if_statement .)
    MINUS           reduce using rule 19 (compound_statement -> if_statement .)
    LPAREN          reduce using rule 19 (compound_statement -> if_statement .)
    $end            reduce using rule 19 (compound_statement -> if_statement .)
    DEDENT          reduce using rule 19 (compound_statement -> if_statement .)


state 12

    (20) compound_statement -> for_statement .

    NEWLINE         reduce using rule 20 (compound_statement -> for_statement .)
    ID              reduce using rule 20 (compound_statement -> for_statement .)
    KEYWORD         reduce using rule 20 (compound_statement -> for_statement .)
    STRING          reduce using rule 20 (compound_statement -> for_statement .)
    NUMBER          reduce using rule 20 (compound_statement -> for_statement .)
    FSTRING         reduce using rule 20 (compound_statement -> for_statement .)
    LBRACKET        reduce using rule 20 (compound_statement -> for_statement .)
    MINUS           reduce using rule 20 (compound_statement -> for_statement .)
    LPAREN          reduce using rule 20 (compound_statement -> for_statement .)
    $end            reduce using rule 20 (compound_statement -> for_statement .)
    DEDENT          reduce using rule 20 (compound_statement -> for_statement .)


state 13

    (21) compound_statement -> while_statement .

    NEWLINE         reduce using rule 21 (compound_statement -> while_statement .)
    ID              reduce using rule 21 (compound_statement -> while_statement .)
    KEYWORD         reduce using rule 21 (compound_statement -> while_statement .)
    STRING          reduce using rule 21 (compound_statement -> while_statement .)
    NUMBER          reduce using rule 21 (compound_statement -> while_statement .)
    FSTRING         reduce using rule 21 (compound_statement -> while_statement .)
    LBRACKET        reduce using rule 21 (compound_statement -> while_statement .)
    MINUS           reduce using rule 21 (compound_statement -> while_statement .)
    LPAREN          reduce using rule 21 (compound_statement -> while_statement .)
    $end            reduce using rule 21 (compound_statement -> while_statement .)
    DEDENT          reduce using rule 21 (compound_statement -> while_statement .)


state 14

    (10) expression_statement -> expression . NEWLINE

    NEWLINE         shift and go to state 31


state 15

    (11) expression_statement -> call . NEWLINE
    (54) primary_expression -> call .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 32
    PLUS            reduce using rule 54 (primary_expression -> call .)
    MINUS           reduce using rule 54 (primary_expression -> call .)
    TIMES           reduce using rule 54 (primary_expression -> call .)
    DIVIDE          reduce using rule 54 (primary_expression -> call .)
    MOD             reduce using rule 54 (primary_expression -> call .)
    EQ              reduce using rule 54 (primary_expression -> call .)
    NE              reduce using rule 54 (primary_expression -> call .)
    LT              reduce using rule 54 (primary_expression -> call .)
    GT              reduce using rule 54 (primary_expression -> call .)
    LE              reduce using rule 54 (primary_expression -> call .)
    GE              reduce using rule 54 (primary_expression -> call .)

  ! NEWLINE         [ reduce using rule 54 (primary_expression -> call .) ]


state 16

    (12) expression_statement -> ID . LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> ID . LPAREN RPAREN NEWLINE
    (14) assignment_statement -> ID . ASSIGN expression NEWLINE
    (15) assignment_statement -> ID . ASSIGN list_literal NEWLINE
    (60) call -> ID . LPAREN arguments RPAREN
    (61) call -> ID . LPAREN RPAREN
    (53) primary_expression -> ID .

    LPAREN          shift and go to state 33
    ASSIGN          shift and go to state 34
    NEWLINE         reduce using rule 53 (primary_expression -> ID .)
    PLUS            reduce using rule 53 (primary_expression -> ID .)
    MINUS           reduce using rule 53 (primary_expression -> ID .)
    TIMES           reduce using rule 53 (primary_expression -> ID .)
    DIVIDE          reduce using rule 53 (primary_expression -> ID .)
    MOD             reduce using rule 53 (primary_expression -> ID .)
    EQ              reduce using rule 53 (primary_expression -> ID .)
    NE              reduce using rule 53 (primary_expression -> ID .)
    LT              reduce using rule 53 (primary_expression -> ID .)
    GT              reduce using rule 53 (primary_expression -> ID .)
    LE              reduce using rule 53 (primary_expression -> ID .)
    GE              reduce using rule 53 (primary_expression -> ID .)


state 17

    (59) group -> LPAREN . expression RPAREN
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 35
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 18

    (36) expression -> list_literal .
    (56) primary_expression -> list_literal .

  ! reduce/reduce conflict for NEWLINE resolved using rule 36 (expression -> list_literal .)
  ! reduce/reduce conflict for RPAREN resolved using rule 36 (expression -> list_literal .)
  ! reduce/reduce conflict for COLON resolved using rule 36 (expression -> list_literal .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 36 (expression -> list_literal .)
  ! reduce/reduce conflict for COMMA resolved using rule 36 (expression -> list_literal .)
    NEWLINE         reduce using rule 36 (expression -> list_literal .)
    RPAREN          reduce using rule 36 (expression -> list_literal .)
    COLON           reduce using rule 36 (expression -> list_literal .)
    RBRACKET        reduce using rule 36 (expression -> list_literal .)
    COMMA           reduce using rule 36 (expression -> list_literal .)
    PLUS            reduce using rule 56 (primary_expression -> list_literal .)
    MINUS           reduce using rule 56 (primary_expression -> list_literal .)
    TIMES           reduce using rule 56 (primary_expression -> list_literal .)
    DIVIDE          reduce using rule 56 (primary_expression -> list_literal .)
    MOD             reduce using rule 56 (primary_expression -> list_literal .)
    EQ              reduce using rule 56 (primary_expression -> list_literal .)
    NE              reduce using rule 56 (primary_expression -> list_literal .)
    LT              reduce using rule 56 (primary_expression -> list_literal .)
    GT              reduce using rule 56 (primary_expression -> list_literal .)
    LE              reduce using rule 56 (primary_expression -> list_literal .)
    GE              reduce using rule 56 (primary_expression -> list_literal .)

  ! NEWLINE         [ reduce using rule 56 (primary_expression -> list_literal .) ]
  ! RPAREN          [ reduce using rule 56 (primary_expression -> list_literal .) ]
  ! COLON           [ reduce using rule 56 (primary_expression -> list_literal .) ]
  ! RBRACKET        [ reduce using rule 56 (primary_expression -> list_literal .) ]
  ! COMMA           [ reduce using rule 56 (primary_expression -> list_literal .) ]


state 19

    (16) return_statement -> KEYWORD . expression NEWLINE
    (17) return_statement -> KEYWORD . NEWLINE
    (22) function_def -> KEYWORD . ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> KEYWORD . expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> KEYWORD . expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> KEYWORD . ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD . expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 39
    ID              shift and go to state 40
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 38
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 20

    (32) expression -> STRING .
    (58) literal -> STRING .

  ! reduce/reduce conflict for NEWLINE resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for COLON resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> STRING .)
    NEWLINE         reduce using rule 32 (expression -> STRING .)
    RPAREN          reduce using rule 32 (expression -> STRING .)
    COLON           reduce using rule 32 (expression -> STRING .)
    RBRACKET        reduce using rule 32 (expression -> STRING .)
    COMMA           reduce using rule 32 (expression -> STRING .)
    PLUS            reduce using rule 58 (literal -> STRING .)
    MINUS           reduce using rule 58 (literal -> STRING .)
    TIMES           reduce using rule 58 (literal -> STRING .)
    DIVIDE          reduce using rule 58 (literal -> STRING .)
    MOD             reduce using rule 58 (literal -> STRING .)
    EQ              reduce using rule 58 (literal -> STRING .)
    NE              reduce using rule 58 (literal -> STRING .)
    LT              reduce using rule 58 (literal -> STRING .)
    GT              reduce using rule 58 (literal -> STRING .)
    LE              reduce using rule 58 (literal -> STRING .)
    GE              reduce using rule 58 (literal -> STRING .)

  ! NEWLINE         [ reduce using rule 58 (literal -> STRING .) ]
  ! RPAREN          [ reduce using rule 58 (literal -> STRING .) ]
  ! COLON           [ reduce using rule 58 (literal -> STRING .) ]
  ! RBRACKET        [ reduce using rule 58 (literal -> STRING .) ]
  ! COMMA           [ reduce using rule 58 (literal -> STRING .) ]


state 21

    (33) expression -> binary_expression .
    (39) binary_expression -> binary_expression . PLUS unary_expression
    (40) binary_expression -> binary_expression . MINUS unary_expression
    (41) binary_expression -> binary_expression . TIMES unary_expression
    (42) binary_expression -> binary_expression . DIVIDE unary_expression
    (43) binary_expression -> binary_expression . MOD unary_expression
    (44) binary_expression -> binary_expression . EQ unary_expression
    (45) binary_expression -> binary_expression . NE unary_expression
    (46) binary_expression -> binary_expression . LT unary_expression
    (47) binary_expression -> binary_expression . GT unary_expression
    (48) binary_expression -> binary_expression . LE unary_expression
    (49) binary_expression -> binary_expression . GE unary_expression

    NEWLINE         reduce using rule 33 (expression -> binary_expression .)
    RPAREN          reduce using rule 33 (expression -> binary_expression .)
    COLON           reduce using rule 33 (expression -> binary_expression .)
    RBRACKET        reduce using rule 33 (expression -> binary_expression .)
    COMMA           reduce using rule 33 (expression -> binary_expression .)
    PLUS            shift and go to state 41
    MINUS           shift and go to state 42
    TIMES           shift and go to state 43
    DIVIDE          shift and go to state 44
    MOD             shift and go to state 45
    EQ              shift and go to state 46
    NE              shift and go to state 47
    LT              shift and go to state 48
    GT              shift and go to state 49
    LE              shift and go to state 50
    GE              shift and go to state 51


state 22

    (34) expression -> primary_expression .
    (50) unary_expression -> primary_expression .

  ! reduce/reduce conflict for NEWLINE resolved using rule 34 (expression -> primary_expression .)
  ! reduce/reduce conflict for RPAREN resolved using rule 34 (expression -> primary_expression .)
  ! reduce/reduce conflict for COLON resolved using rule 34 (expression -> primary_expression .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 34 (expression -> primary_expression .)
  ! reduce/reduce conflict for COMMA resolved using rule 34 (expression -> primary_expression .)
    NEWLINE         reduce using rule 34 (expression -> primary_expression .)
    RPAREN          reduce using rule 34 (expression -> primary_expression .)
    COLON           reduce using rule 34 (expression -> primary_expression .)
    RBRACKET        reduce using rule 34 (expression -> primary_expression .)
    COMMA           reduce using rule 34 (expression -> primary_expression .)
    PLUS            reduce using rule 50 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> primary_expression .)
    TIMES           reduce using rule 50 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> primary_expression .)
    MOD             reduce using rule 50 (unary_expression -> primary_expression .)
    EQ              reduce using rule 50 (unary_expression -> primary_expression .)
    NE              reduce using rule 50 (unary_expression -> primary_expression .)
    LT              reduce using rule 50 (unary_expression -> primary_expression .)
    GT              reduce using rule 50 (unary_expression -> primary_expression .)
    LE              reduce using rule 50 (unary_expression -> primary_expression .)
    GE              reduce using rule 50 (unary_expression -> primary_expression .)

  ! NEWLINE         [ reduce using rule 50 (unary_expression -> primary_expression .) ]
  ! RPAREN          [ reduce using rule 50 (unary_expression -> primary_expression .) ]
  ! COLON           [ reduce using rule 50 (unary_expression -> primary_expression .) ]
  ! RBRACKET        [ reduce using rule 50 (unary_expression -> primary_expression .) ]
  ! COMMA           [ reduce using rule 50 (unary_expression -> primary_expression .) ]


state 23

    (35) expression -> NUMBER .
    (57) literal -> NUMBER .

  ! reduce/reduce conflict for NEWLINE resolved using rule 35 (expression -> NUMBER .)
  ! reduce/reduce conflict for RPAREN resolved using rule 35 (expression -> NUMBER .)
  ! reduce/reduce conflict for COLON resolved using rule 35 (expression -> NUMBER .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 35 (expression -> NUMBER .)
  ! reduce/reduce conflict for COMMA resolved using rule 35 (expression -> NUMBER .)
    NEWLINE         reduce using rule 35 (expression -> NUMBER .)
    RPAREN          reduce using rule 35 (expression -> NUMBER .)
    COLON           reduce using rule 35 (expression -> NUMBER .)
    RBRACKET        reduce using rule 35 (expression -> NUMBER .)
    COMMA           reduce using rule 35 (expression -> NUMBER .)
    PLUS            reduce using rule 57 (literal -> NUMBER .)
    MINUS           reduce using rule 57 (literal -> NUMBER .)
    TIMES           reduce using rule 57 (literal -> NUMBER .)
    DIVIDE          reduce using rule 57 (literal -> NUMBER .)
    MOD             reduce using rule 57 (literal -> NUMBER .)
    EQ              reduce using rule 57 (literal -> NUMBER .)
    NE              reduce using rule 57 (literal -> NUMBER .)
    LT              reduce using rule 57 (literal -> NUMBER .)
    GT              reduce using rule 57 (literal -> NUMBER .)
    LE              reduce using rule 57 (literal -> NUMBER .)
    GE              reduce using rule 57 (literal -> NUMBER .)

  ! NEWLINE         [ reduce using rule 57 (literal -> NUMBER .) ]
  ! RPAREN          [ reduce using rule 57 (literal -> NUMBER .) ]
  ! COLON           [ reduce using rule 57 (literal -> NUMBER .) ]
  ! RBRACKET        [ reduce using rule 57 (literal -> NUMBER .) ]
  ! COMMA           [ reduce using rule 57 (literal -> NUMBER .) ]


state 24

    (37) expression -> FSTRING .

    NEWLINE         reduce using rule 37 (expression -> FSTRING .)
    RPAREN          reduce using rule 37 (expression -> FSTRING .)
    COLON           reduce using rule 37 (expression -> FSTRING .)
    RBRACKET        reduce using rule 37 (expression -> FSTRING .)
    COMMA           reduce using rule 37 (expression -> FSTRING .)


state 25

    (38) binary_expression -> unary_expression .

    PLUS            reduce using rule 38 (binary_expression -> unary_expression .)
    MINUS           reduce using rule 38 (binary_expression -> unary_expression .)
    TIMES           reduce using rule 38 (binary_expression -> unary_expression .)
    DIVIDE          reduce using rule 38 (binary_expression -> unary_expression .)
    MOD             reduce using rule 38 (binary_expression -> unary_expression .)
    EQ              reduce using rule 38 (binary_expression -> unary_expression .)
    NE              reduce using rule 38 (binary_expression -> unary_expression .)
    LT              reduce using rule 38 (binary_expression -> unary_expression .)
    GT              reduce using rule 38 (binary_expression -> unary_expression .)
    LE              reduce using rule 38 (binary_expression -> unary_expression .)
    GE              reduce using rule 38 (binary_expression -> unary_expression .)
    NEWLINE         reduce using rule 38 (binary_expression -> unary_expression .)
    RPAREN          reduce using rule 38 (binary_expression -> unary_expression .)
    COLON           reduce using rule 38 (binary_expression -> unary_expression .)
    RBRACKET        reduce using rule 38 (binary_expression -> unary_expression .)
    COMMA           reduce using rule 38 (binary_expression -> unary_expression .)


state 26

    (51) unary_expression -> MINUS . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 52
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 27

    (52) primary_expression -> literal .

    NEWLINE         reduce using rule 52 (primary_expression -> literal .)
    PLUS            reduce using rule 52 (primary_expression -> literal .)
    MINUS           reduce using rule 52 (primary_expression -> literal .)
    TIMES           reduce using rule 52 (primary_expression -> literal .)
    DIVIDE          reduce using rule 52 (primary_expression -> literal .)
    MOD             reduce using rule 52 (primary_expression -> literal .)
    EQ              reduce using rule 52 (primary_expression -> literal .)
    NE              reduce using rule 52 (primary_expression -> literal .)
    LT              reduce using rule 52 (primary_expression -> literal .)
    GT              reduce using rule 52 (primary_expression -> literal .)
    LE              reduce using rule 52 (primary_expression -> literal .)
    GE              reduce using rule 52 (primary_expression -> literal .)
    RPAREN          reduce using rule 52 (primary_expression -> literal .)
    COLON           reduce using rule 52 (primary_expression -> literal .)
    RBRACKET        reduce using rule 52 (primary_expression -> literal .)
    COMMA           reduce using rule 52 (primary_expression -> literal .)


state 28

    (55) primary_expression -> group .

    NEWLINE         reduce using rule 55 (primary_expression -> group .)
    PLUS            reduce using rule 55 (primary_expression -> group .)
    MINUS           reduce using rule 55 (primary_expression -> group .)
    TIMES           reduce using rule 55 (primary_expression -> group .)
    DIVIDE          reduce using rule 55 (primary_expression -> group .)
    MOD             reduce using rule 55 (primary_expression -> group .)
    EQ              reduce using rule 55 (primary_expression -> group .)
    NE              reduce using rule 55 (primary_expression -> group .)
    LT              reduce using rule 55 (primary_expression -> group .)
    GT              reduce using rule 55 (primary_expression -> group .)
    LE              reduce using rule 55 (primary_expression -> group .)
    GE              reduce using rule 55 (primary_expression -> group .)
    RPAREN          reduce using rule 55 (primary_expression -> group .)
    COLON           reduce using rule 55 (primary_expression -> group .)
    RBRACKET        reduce using rule 55 (primary_expression -> group .)
    COMMA           reduce using rule 55 (primary_expression -> group .)


state 29

    (70) list_literal -> LBRACKET . list_items RBRACKET
    (71) list_items -> . expression
    (72) list_items -> . list_items COMMA expression
    (73) list_items -> . empty
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (69) empty -> .
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    RBRACKET        reduce using rule 69 (empty -> .)
    COMMA           reduce using rule 69 (empty -> .)
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    list_items                     shift and go to state 57
    expression                     shift and go to state 58
    empty                          shift and go to state 59
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 30

    (3) statement_list -> statement_list statement .

    NEWLINE         reduce using rule 3 (statement_list -> statement_list statement .)
    ID              reduce using rule 3 (statement_list -> statement_list statement .)
    KEYWORD         reduce using rule 3 (statement_list -> statement_list statement .)
    STRING          reduce using rule 3 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 3 (statement_list -> statement_list statement .)
    FSTRING         reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACKET        reduce using rule 3 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 3 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    DEDENT          reduce using rule 3 (statement_list -> statement_list statement .)


state 31

    (10) expression_statement -> expression NEWLINE .

    NEWLINE         reduce using rule 10 (expression_statement -> expression NEWLINE .)
    ID              reduce using rule 10 (expression_statement -> expression NEWLINE .)
    KEYWORD         reduce using rule 10 (expression_statement -> expression NEWLINE .)
    STRING          reduce using rule 10 (expression_statement -> expression NEWLINE .)
    NUMBER          reduce using rule 10 (expression_statement -> expression NEWLINE .)
    FSTRING         reduce using rule 10 (expression_statement -> expression NEWLINE .)
    LBRACKET        reduce using rule 10 (expression_statement -> expression NEWLINE .)
    MINUS           reduce using rule 10 (expression_statement -> expression NEWLINE .)
    LPAREN          reduce using rule 10 (expression_statement -> expression NEWLINE .)
    $end            reduce using rule 10 (expression_statement -> expression NEWLINE .)
    DEDENT          reduce using rule 10 (expression_statement -> expression NEWLINE .)


state 32

    (11) expression_statement -> call NEWLINE .

    NEWLINE         reduce using rule 11 (expression_statement -> call NEWLINE .)
    ID              reduce using rule 11 (expression_statement -> call NEWLINE .)
    KEYWORD         reduce using rule 11 (expression_statement -> call NEWLINE .)
    STRING          reduce using rule 11 (expression_statement -> call NEWLINE .)
    NUMBER          reduce using rule 11 (expression_statement -> call NEWLINE .)
    FSTRING         reduce using rule 11 (expression_statement -> call NEWLINE .)
    LBRACKET        reduce using rule 11 (expression_statement -> call NEWLINE .)
    MINUS           reduce using rule 11 (expression_statement -> call NEWLINE .)
    LPAREN          reduce using rule 11 (expression_statement -> call NEWLINE .)
    $end            reduce using rule 11 (expression_statement -> call NEWLINE .)
    DEDENT          reduce using rule 11 (expression_statement -> call NEWLINE .)


state 33

    (12) expression_statement -> ID LPAREN . arguments RPAREN NEWLINE
    (13) expression_statement -> ID LPAREN . RPAREN NEWLINE
    (60) call -> ID LPAREN . arguments RPAREN
    (61) call -> ID LPAREN . RPAREN
    (62) arguments -> . expression
    (63) arguments -> . arguments COMMA expression
    (64) arguments -> . STRING
    (65) arguments -> . arguments COMMA STRING
    (66) arguments -> . arguments COMMA
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 61
    STRING          shift and go to state 63
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    arguments                      shift and go to state 60
    expression                     shift and go to state 62
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 34

    (14) assignment_statement -> ID ASSIGN . expression NEWLINE
    (15) assignment_statement -> ID ASSIGN . list_literal NEWLINE
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    ID              shift and go to state 36
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 64
    list_literal                   shift and go to state 65
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 35

    (59) group -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 66


state 36

    (53) primary_expression -> ID .
    (60) call -> ID . LPAREN arguments RPAREN
    (61) call -> ID . LPAREN RPAREN

    RPAREN          reduce using rule 53 (primary_expression -> ID .)
    PLUS            reduce using rule 53 (primary_expression -> ID .)
    MINUS           reduce using rule 53 (primary_expression -> ID .)
    TIMES           reduce using rule 53 (primary_expression -> ID .)
    DIVIDE          reduce using rule 53 (primary_expression -> ID .)
    MOD             reduce using rule 53 (primary_expression -> ID .)
    EQ              reduce using rule 53 (primary_expression -> ID .)
    NE              reduce using rule 53 (primary_expression -> ID .)
    LT              reduce using rule 53 (primary_expression -> ID .)
    GT              reduce using rule 53 (primary_expression -> ID .)
    LE              reduce using rule 53 (primary_expression -> ID .)
    GE              reduce using rule 53 (primary_expression -> ID .)
    NEWLINE         reduce using rule 53 (primary_expression -> ID .)
    COLON           reduce using rule 53 (primary_expression -> ID .)
    RBRACKET        reduce using rule 53 (primary_expression -> ID .)
    COMMA           reduce using rule 53 (primary_expression -> ID .)
    LPAREN          shift and go to state 67


state 37

    (54) primary_expression -> call .

    RPAREN          reduce using rule 54 (primary_expression -> call .)
    PLUS            reduce using rule 54 (primary_expression -> call .)
    MINUS           reduce using rule 54 (primary_expression -> call .)
    TIMES           reduce using rule 54 (primary_expression -> call .)
    DIVIDE          reduce using rule 54 (primary_expression -> call .)
    MOD             reduce using rule 54 (primary_expression -> call .)
    EQ              reduce using rule 54 (primary_expression -> call .)
    NE              reduce using rule 54 (primary_expression -> call .)
    LT              reduce using rule 54 (primary_expression -> call .)
    GT              reduce using rule 54 (primary_expression -> call .)
    LE              reduce using rule 54 (primary_expression -> call .)
    GE              reduce using rule 54 (primary_expression -> call .)
    NEWLINE         reduce using rule 54 (primary_expression -> call .)
    COLON           reduce using rule 54 (primary_expression -> call .)
    RBRACKET        reduce using rule 54 (primary_expression -> call .)
    COMMA           reduce using rule 54 (primary_expression -> call .)


state 38

    (16) return_statement -> KEYWORD expression . NEWLINE
    (28) if_statement -> KEYWORD expression . COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> KEYWORD expression . COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD expression . COLON NEWLINE INDENT statement_list DEDENT

    NEWLINE         shift and go to state 68
    COLON           shift and go to state 69


state 39

    (17) return_statement -> KEYWORD NEWLINE .

    NEWLINE         reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    ID              reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    KEYWORD         reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    STRING          reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    NUMBER          reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    FSTRING         reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    LBRACKET        reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    MINUS           reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    LPAREN          reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    $end            reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)
    DEDENT          reduce using rule 17 (return_statement -> KEYWORD NEWLINE .)


state 40

    (22) function_def -> KEYWORD ID . LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> KEYWORD ID . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (53) primary_expression -> ID .
    (60) call -> ID . LPAREN arguments RPAREN
    (61) call -> ID . LPAREN RPAREN

    LPAREN          shift and go to state 71
    KEYWORD         shift and go to state 70
    NEWLINE         reduce using rule 53 (primary_expression -> ID .)
    COLON           reduce using rule 53 (primary_expression -> ID .)
    PLUS            reduce using rule 53 (primary_expression -> ID .)
    MINUS           reduce using rule 53 (primary_expression -> ID .)
    TIMES           reduce using rule 53 (primary_expression -> ID .)
    DIVIDE          reduce using rule 53 (primary_expression -> ID .)
    MOD             reduce using rule 53 (primary_expression -> ID .)
    EQ              reduce using rule 53 (primary_expression -> ID .)
    NE              reduce using rule 53 (primary_expression -> ID .)
    LT              reduce using rule 53 (primary_expression -> ID .)
    GT              reduce using rule 53 (primary_expression -> ID .)
    LE              reduce using rule 53 (primary_expression -> ID .)
    GE              reduce using rule 53 (primary_expression -> ID .)


state 41

    (39) binary_expression -> binary_expression PLUS . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 72
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 42

    (40) binary_expression -> binary_expression MINUS . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 73
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 43

    (41) binary_expression -> binary_expression TIMES . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 74
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 44

    (42) binary_expression -> binary_expression DIVIDE . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 75
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 45

    (43) binary_expression -> binary_expression MOD . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 76
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 46

    (44) binary_expression -> binary_expression EQ . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 77
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 47

    (45) binary_expression -> binary_expression NE . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 78
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 48

    (46) binary_expression -> binary_expression LT . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 79
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 49

    (47) binary_expression -> binary_expression GT . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 80
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 50

    (48) binary_expression -> binary_expression LE . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 81
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 51

    (49) binary_expression -> binary_expression GE . unary_expression
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN
    (70) list_literal -> . LBRACKET list_items RBRACKET

    MINUS           shift and go to state 26
    ID              shift and go to state 36
    NUMBER          shift and go to state 55
    STRING          shift and go to state 56
    LPAREN          shift and go to state 17
    LBRACKET        shift and go to state 29

    unary_expression               shift and go to state 82
    primary_expression             shift and go to state 53
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28
    list_literal                   shift and go to state 54

state 52

    (51) unary_expression -> MINUS unary_expression .

    PLUS            reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    MINUS           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    TIMES           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    DIVIDE          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    MOD             reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    EQ              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    NE              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    LT              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    GT              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    LE              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    GE              reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    NEWLINE         reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    RPAREN          reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    COLON           reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    RBRACKET        reduce using rule 51 (unary_expression -> MINUS unary_expression .)
    COMMA           reduce using rule 51 (unary_expression -> MINUS unary_expression .)


state 53

    (50) unary_expression -> primary_expression .

    PLUS            reduce using rule 50 (unary_expression -> primary_expression .)
    MINUS           reduce using rule 50 (unary_expression -> primary_expression .)
    TIMES           reduce using rule 50 (unary_expression -> primary_expression .)
    DIVIDE          reduce using rule 50 (unary_expression -> primary_expression .)
    MOD             reduce using rule 50 (unary_expression -> primary_expression .)
    EQ              reduce using rule 50 (unary_expression -> primary_expression .)
    NE              reduce using rule 50 (unary_expression -> primary_expression .)
    LT              reduce using rule 50 (unary_expression -> primary_expression .)
    GT              reduce using rule 50 (unary_expression -> primary_expression .)
    LE              reduce using rule 50 (unary_expression -> primary_expression .)
    GE              reduce using rule 50 (unary_expression -> primary_expression .)
    NEWLINE         reduce using rule 50 (unary_expression -> primary_expression .)
    RPAREN          reduce using rule 50 (unary_expression -> primary_expression .)
    COLON           reduce using rule 50 (unary_expression -> primary_expression .)
    RBRACKET        reduce using rule 50 (unary_expression -> primary_expression .)
    COMMA           reduce using rule 50 (unary_expression -> primary_expression .)


state 54

    (56) primary_expression -> list_literal .

    PLUS            reduce using rule 56 (primary_expression -> list_literal .)
    MINUS           reduce using rule 56 (primary_expression -> list_literal .)
    TIMES           reduce using rule 56 (primary_expression -> list_literal .)
    DIVIDE          reduce using rule 56 (primary_expression -> list_literal .)
    MOD             reduce using rule 56 (primary_expression -> list_literal .)
    EQ              reduce using rule 56 (primary_expression -> list_literal .)
    NE              reduce using rule 56 (primary_expression -> list_literal .)
    LT              reduce using rule 56 (primary_expression -> list_literal .)
    GT              reduce using rule 56 (primary_expression -> list_literal .)
    LE              reduce using rule 56 (primary_expression -> list_literal .)
    GE              reduce using rule 56 (primary_expression -> list_literal .)
    NEWLINE         reduce using rule 56 (primary_expression -> list_literal .)
    RPAREN          reduce using rule 56 (primary_expression -> list_literal .)
    COLON           reduce using rule 56 (primary_expression -> list_literal .)
    RBRACKET        reduce using rule 56 (primary_expression -> list_literal .)
    COMMA           reduce using rule 56 (primary_expression -> list_literal .)


state 55

    (57) literal -> NUMBER .

    PLUS            reduce using rule 57 (literal -> NUMBER .)
    MINUS           reduce using rule 57 (literal -> NUMBER .)
    TIMES           reduce using rule 57 (literal -> NUMBER .)
    DIVIDE          reduce using rule 57 (literal -> NUMBER .)
    MOD             reduce using rule 57 (literal -> NUMBER .)
    EQ              reduce using rule 57 (literal -> NUMBER .)
    NE              reduce using rule 57 (literal -> NUMBER .)
    LT              reduce using rule 57 (literal -> NUMBER .)
    GT              reduce using rule 57 (literal -> NUMBER .)
    LE              reduce using rule 57 (literal -> NUMBER .)
    GE              reduce using rule 57 (literal -> NUMBER .)
    NEWLINE         reduce using rule 57 (literal -> NUMBER .)
    RPAREN          reduce using rule 57 (literal -> NUMBER .)
    COLON           reduce using rule 57 (literal -> NUMBER .)
    RBRACKET        reduce using rule 57 (literal -> NUMBER .)
    COMMA           reduce using rule 57 (literal -> NUMBER .)


state 56

    (58) literal -> STRING .

    PLUS            reduce using rule 58 (literal -> STRING .)
    MINUS           reduce using rule 58 (literal -> STRING .)
    TIMES           reduce using rule 58 (literal -> STRING .)
    DIVIDE          reduce using rule 58 (literal -> STRING .)
    MOD             reduce using rule 58 (literal -> STRING .)
    EQ              reduce using rule 58 (literal -> STRING .)
    NE              reduce using rule 58 (literal -> STRING .)
    LT              reduce using rule 58 (literal -> STRING .)
    GT              reduce using rule 58 (literal -> STRING .)
    LE              reduce using rule 58 (literal -> STRING .)
    GE              reduce using rule 58 (literal -> STRING .)
    NEWLINE         reduce using rule 58 (literal -> STRING .)
    RPAREN          reduce using rule 58 (literal -> STRING .)
    COLON           reduce using rule 58 (literal -> STRING .)
    RBRACKET        reduce using rule 58 (literal -> STRING .)
    COMMA           reduce using rule 58 (literal -> STRING .)


state 57

    (70) list_literal -> LBRACKET list_items . RBRACKET
    (72) list_items -> list_items . COMMA expression

    RBRACKET        shift and go to state 83
    COMMA           shift and go to state 84


state 58

    (71) list_items -> expression .

    RBRACKET        reduce using rule 71 (list_items -> expression .)
    COMMA           reduce using rule 71 (list_items -> expression .)


state 59

    (73) list_items -> empty .

    RBRACKET        reduce using rule 73 (list_items -> empty .)
    COMMA           reduce using rule 73 (list_items -> empty .)


state 60

    (12) expression_statement -> ID LPAREN arguments . RPAREN NEWLINE
    (60) call -> ID LPAREN arguments . RPAREN
    (63) arguments -> arguments . COMMA expression
    (65) arguments -> arguments . COMMA STRING
    (66) arguments -> arguments . COMMA

    RPAREN          shift and go to state 85
    COMMA           shift and go to state 86


state 61

    (13) expression_statement -> ID LPAREN RPAREN . NEWLINE
    (61) call -> ID LPAREN RPAREN .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 87
    PLUS            reduce using rule 61 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 61 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 61 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 61 (call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 61 (call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    NE              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    LT              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    GT              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    LE              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    GE              reduce using rule 61 (call -> ID LPAREN RPAREN .)

  ! NEWLINE         [ reduce using rule 61 (call -> ID LPAREN RPAREN .) ]


state 62

    (62) arguments -> expression .

    RPAREN          reduce using rule 62 (arguments -> expression .)
    COMMA           reduce using rule 62 (arguments -> expression .)


state 63

    (64) arguments -> STRING .
    (32) expression -> STRING .
    (58) literal -> STRING .

  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> STRING .)
    RPAREN          reduce using rule 32 (expression -> STRING .)
    COMMA           reduce using rule 32 (expression -> STRING .)
    PLUS            reduce using rule 58 (literal -> STRING .)
    MINUS           reduce using rule 58 (literal -> STRING .)
    TIMES           reduce using rule 58 (literal -> STRING .)
    DIVIDE          reduce using rule 58 (literal -> STRING .)
    MOD             reduce using rule 58 (literal -> STRING .)
    EQ              reduce using rule 58 (literal -> STRING .)
    NE              reduce using rule 58 (literal -> STRING .)
    LT              reduce using rule 58 (literal -> STRING .)
    GT              reduce using rule 58 (literal -> STRING .)
    LE              reduce using rule 58 (literal -> STRING .)
    GE              reduce using rule 58 (literal -> STRING .)

  ! RPAREN          [ reduce using rule 64 (arguments -> STRING .) ]
  ! COMMA           [ reduce using rule 64 (arguments -> STRING .) ]
  ! RPAREN          [ reduce using rule 58 (literal -> STRING .) ]
  ! COMMA           [ reduce using rule 58 (literal -> STRING .) ]


state 64

    (14) assignment_statement -> ID ASSIGN expression . NEWLINE

    NEWLINE         shift and go to state 88


state 65

    (15) assignment_statement -> ID ASSIGN list_literal . NEWLINE
    (36) expression -> list_literal .
    (56) primary_expression -> list_literal .

  ! shift/reduce conflict for NEWLINE resolved as shift
  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 89
    PLUS            reduce using rule 56 (primary_expression -> list_literal .)
    MINUS           reduce using rule 56 (primary_expression -> list_literal .)
    TIMES           reduce using rule 56 (primary_expression -> list_literal .)
    DIVIDE          reduce using rule 56 (primary_expression -> list_literal .)
    MOD             reduce using rule 56 (primary_expression -> list_literal .)
    EQ              reduce using rule 56 (primary_expression -> list_literal .)
    NE              reduce using rule 56 (primary_expression -> list_literal .)
    LT              reduce using rule 56 (primary_expression -> list_literal .)
    GT              reduce using rule 56 (primary_expression -> list_literal .)
    LE              reduce using rule 56 (primary_expression -> list_literal .)
    GE              reduce using rule 56 (primary_expression -> list_literal .)

  ! NEWLINE         [ reduce using rule 36 (expression -> list_literal .) ]
  ! NEWLINE         [ reduce using rule 56 (primary_expression -> list_literal .) ]


state 66

    (59) group -> LPAREN expression RPAREN .

    NEWLINE         reduce using rule 59 (group -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 59 (group -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 59 (group -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 59 (group -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 59 (group -> LPAREN expression RPAREN .)
    MOD             reduce using rule 59 (group -> LPAREN expression RPAREN .)
    EQ              reduce using rule 59 (group -> LPAREN expression RPAREN .)
    NE              reduce using rule 59 (group -> LPAREN expression RPAREN .)
    LT              reduce using rule 59 (group -> LPAREN expression RPAREN .)
    GT              reduce using rule 59 (group -> LPAREN expression RPAREN .)
    LE              reduce using rule 59 (group -> LPAREN expression RPAREN .)
    GE              reduce using rule 59 (group -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 59 (group -> LPAREN expression RPAREN .)
    COLON           reduce using rule 59 (group -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 59 (group -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 59 (group -> LPAREN expression RPAREN .)


state 67

    (60) call -> ID LPAREN . arguments RPAREN
    (61) call -> ID LPAREN . RPAREN
    (62) arguments -> . expression
    (63) arguments -> . arguments COMMA expression
    (64) arguments -> . STRING
    (65) arguments -> . arguments COMMA STRING
    (66) arguments -> . arguments COMMA
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 91
    STRING          shift and go to state 63
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    arguments                      shift and go to state 90
    expression                     shift and go to state 62
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 68

    (16) return_statement -> KEYWORD expression NEWLINE .

    NEWLINE         reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    ID              reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    KEYWORD         reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    STRING          reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    NUMBER          reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    FSTRING         reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    LBRACKET        reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    MINUS           reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    LPAREN          reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    $end            reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)
    DEDENT          reduce using rule 16 (return_statement -> KEYWORD expression NEWLINE .)


state 69

    (28) if_statement -> KEYWORD expression COLON . NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> KEYWORD expression COLON . NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD expression COLON . NEWLINE INDENT statement_list DEDENT

    NEWLINE         shift and go to state 92


state 70

    (30) for_statement -> KEYWORD ID KEYWORD . expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 93
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 71

    (22) function_def -> KEYWORD ID LPAREN . parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (60) call -> ID LPAREN . arguments RPAREN
    (61) call -> ID LPAREN . RPAREN
    (23) parameter_list -> . parameter
    (24) parameter_list -> . parameter_list COMMA parameter
    (62) arguments -> . expression
    (63) arguments -> . arguments COMMA expression
    (64) arguments -> . STRING
    (65) arguments -> . arguments COMMA STRING
    (66) arguments -> . arguments COMMA
    (25) parameter -> . ID COLON ID
    (26) parameter -> . ID
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    RPAREN          shift and go to state 91
    STRING          shift and go to state 63
    ID              shift and go to state 94
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    parameter_list                 shift and go to state 95
    arguments                      shift and go to state 90
    parameter                      shift and go to state 96
    expression                     shift and go to state 62
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 72

    (39) binary_expression -> binary_expression PLUS unary_expression .

    PLUS            reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    MINUS           reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    TIMES           reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    DIVIDE          reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    MOD             reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    EQ              reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    NE              reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    LT              reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    GT              reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    LE              reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    GE              reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    NEWLINE         reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    RPAREN          reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    COLON           reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    RBRACKET        reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)
    COMMA           reduce using rule 39 (binary_expression -> binary_expression PLUS unary_expression .)


state 73

    (40) binary_expression -> binary_expression MINUS unary_expression .

    PLUS            reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    MINUS           reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    TIMES           reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    DIVIDE          reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    MOD             reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    EQ              reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    NE              reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    LT              reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    GT              reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    LE              reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    GE              reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    NEWLINE         reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    RPAREN          reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    COLON           reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    RBRACKET        reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)
    COMMA           reduce using rule 40 (binary_expression -> binary_expression MINUS unary_expression .)


state 74

    (41) binary_expression -> binary_expression TIMES unary_expression .

    PLUS            reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    MINUS           reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    TIMES           reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    DIVIDE          reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    MOD             reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    EQ              reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    NE              reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    LT              reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    GT              reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    LE              reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    GE              reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    NEWLINE         reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    RPAREN          reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    COLON           reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    RBRACKET        reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)
    COMMA           reduce using rule 41 (binary_expression -> binary_expression TIMES unary_expression .)


state 75

    (42) binary_expression -> binary_expression DIVIDE unary_expression .

    PLUS            reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    TIMES           reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    MOD             reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    EQ              reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    NE              reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    LT              reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    GT              reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    LE              reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    GE              reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    NEWLINE         reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    RPAREN          reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    COLON           reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    RBRACKET        reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 42 (binary_expression -> binary_expression DIVIDE unary_expression .)


state 76

    (43) binary_expression -> binary_expression MOD unary_expression .

    PLUS            reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    MINUS           reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    TIMES           reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    DIVIDE          reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    MOD             reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    EQ              reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    NE              reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    LT              reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    GT              reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    LE              reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    GE              reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    NEWLINE         reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    RPAREN          reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    COLON           reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    RBRACKET        reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)
    COMMA           reduce using rule 43 (binary_expression -> binary_expression MOD unary_expression .)


state 77

    (44) binary_expression -> binary_expression EQ unary_expression .

    PLUS            reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    MINUS           reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    TIMES           reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    DIVIDE          reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    MOD             reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    EQ              reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    NE              reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    LT              reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    GT              reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    LE              reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    GE              reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    NEWLINE         reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    RPAREN          reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    COLON           reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    RBRACKET        reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)
    COMMA           reduce using rule 44 (binary_expression -> binary_expression EQ unary_expression .)


state 78

    (45) binary_expression -> binary_expression NE unary_expression .

    PLUS            reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    MINUS           reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    TIMES           reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    DIVIDE          reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    MOD             reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    EQ              reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    NE              reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    LT              reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    GT              reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    LE              reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    GE              reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    NEWLINE         reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    RPAREN          reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    COLON           reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    RBRACKET        reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)
    COMMA           reduce using rule 45 (binary_expression -> binary_expression NE unary_expression .)


state 79

    (46) binary_expression -> binary_expression LT unary_expression .

    PLUS            reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    MINUS           reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    TIMES           reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    DIVIDE          reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    MOD             reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    EQ              reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    NE              reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    LT              reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    GT              reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    LE              reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    GE              reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    NEWLINE         reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    RPAREN          reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    COLON           reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    RBRACKET        reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)
    COMMA           reduce using rule 46 (binary_expression -> binary_expression LT unary_expression .)


state 80

    (47) binary_expression -> binary_expression GT unary_expression .

    PLUS            reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    MINUS           reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    TIMES           reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    DIVIDE          reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    MOD             reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    EQ              reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    NE              reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    LT              reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    GT              reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    LE              reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    GE              reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    NEWLINE         reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    RPAREN          reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    COLON           reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    RBRACKET        reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)
    COMMA           reduce using rule 47 (binary_expression -> binary_expression GT unary_expression .)


state 81

    (48) binary_expression -> binary_expression LE unary_expression .

    PLUS            reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    MINUS           reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    TIMES           reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    DIVIDE          reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    MOD             reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    EQ              reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    NE              reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    LT              reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    GT              reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    LE              reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    GE              reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    NEWLINE         reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    RPAREN          reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    COLON           reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    RBRACKET        reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)
    COMMA           reduce using rule 48 (binary_expression -> binary_expression LE unary_expression .)


state 82

    (49) binary_expression -> binary_expression GE unary_expression .

    PLUS            reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    MINUS           reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    TIMES           reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    DIVIDE          reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    MOD             reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    EQ              reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    NE              reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    LT              reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    GT              reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    LE              reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    GE              reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    NEWLINE         reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    RPAREN          reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    COLON           reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    RBRACKET        reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)
    COMMA           reduce using rule 49 (binary_expression -> binary_expression GE unary_expression .)


state 83

    (70) list_literal -> LBRACKET list_items RBRACKET .

    NEWLINE         reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    PLUS            reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    MINUS           reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    TIMES           reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    DIVIDE          reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    MOD             reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    EQ              reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    NE              reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    LT              reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    GT              reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    LE              reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    GE              reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    RPAREN          reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    COLON           reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    RBRACKET        reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)
    COMMA           reduce using rule 70 (list_literal -> LBRACKET list_items RBRACKET .)


state 84

    (72) list_items -> list_items COMMA . expression
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 97
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 85

    (12) expression_statement -> ID LPAREN arguments RPAREN . NEWLINE
    (60) call -> ID LPAREN arguments RPAREN .

  ! shift/reduce conflict for NEWLINE resolved as shift
    NEWLINE         shift and go to state 98
    PLUS            reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    MOD             reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    EQ              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    NE              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    LT              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    GT              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    LE              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    GE              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)

  ! NEWLINE         [ reduce using rule 60 (call -> ID LPAREN arguments RPAREN .) ]


state 86

    (63) arguments -> arguments COMMA . expression
    (65) arguments -> arguments COMMA . STRING
    (66) arguments -> arguments COMMA .
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (59) group -> . LPAREN expression RPAREN

    STRING          shift and go to state 100
    RPAREN          reduce using rule 66 (arguments -> arguments COMMA .)
    COMMA           reduce using rule 66 (arguments -> arguments COMMA .)
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    ID              shift and go to state 36
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 99
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    list_literal                   shift and go to state 18
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    call                           shift and go to state 37
    group                          shift and go to state 28

state 87

    (13) expression_statement -> ID LPAREN RPAREN NEWLINE .

    NEWLINE         reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    ID              reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    KEYWORD         reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    STRING          reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    NUMBER          reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    FSTRING         reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    LBRACKET        reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    MINUS           reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    LPAREN          reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    $end            reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)
    DEDENT          reduce using rule 13 (expression_statement -> ID LPAREN RPAREN NEWLINE .)


state 88

    (14) assignment_statement -> ID ASSIGN expression NEWLINE .

    NEWLINE         reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    ID              reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    KEYWORD         reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    STRING          reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    NUMBER          reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    FSTRING         reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    LBRACKET        reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    MINUS           reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    LPAREN          reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    $end            reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)
    DEDENT          reduce using rule 14 (assignment_statement -> ID ASSIGN expression NEWLINE .)


state 89

    (15) assignment_statement -> ID ASSIGN list_literal NEWLINE .

    NEWLINE         reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    ID              reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    KEYWORD         reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    STRING          reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    NUMBER          reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    FSTRING         reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    LBRACKET        reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    MINUS           reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    LPAREN          reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    $end            reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)
    DEDENT          reduce using rule 15 (assignment_statement -> ID ASSIGN list_literal NEWLINE .)


state 90

    (60) call -> ID LPAREN arguments . RPAREN
    (63) arguments -> arguments . COMMA expression
    (65) arguments -> arguments . COMMA STRING
    (66) arguments -> arguments . COMMA

    RPAREN          shift and go to state 101
    COMMA           shift and go to state 86


state 91

    (61) call -> ID LPAREN RPAREN .

    RPAREN          reduce using rule 61 (call -> ID LPAREN RPAREN .)
    PLUS            reduce using rule 61 (call -> ID LPAREN RPAREN .)
    MINUS           reduce using rule 61 (call -> ID LPAREN RPAREN .)
    TIMES           reduce using rule 61 (call -> ID LPAREN RPAREN .)
    DIVIDE          reduce using rule 61 (call -> ID LPAREN RPAREN .)
    MOD             reduce using rule 61 (call -> ID LPAREN RPAREN .)
    EQ              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    NE              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    LT              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    GT              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    LE              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    GE              reduce using rule 61 (call -> ID LPAREN RPAREN .)
    NEWLINE         reduce using rule 61 (call -> ID LPAREN RPAREN .)
    COLON           reduce using rule 61 (call -> ID LPAREN RPAREN .)
    RBRACKET        reduce using rule 61 (call -> ID LPAREN RPAREN .)
    COMMA           reduce using rule 61 (call -> ID LPAREN RPAREN .)


state 92

    (28) if_statement -> KEYWORD expression COLON NEWLINE . INDENT statement_list DEDENT
    (29) if_statement -> KEYWORD expression COLON NEWLINE . INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD expression COLON NEWLINE . INDENT statement_list DEDENT

    INDENT          shift and go to state 102


state 93

    (30) for_statement -> KEYWORD ID KEYWORD expression . COLON NEWLINE INDENT statement_list DEDENT

    COLON           shift and go to state 103


state 94

    (25) parameter -> ID . COLON ID
    (26) parameter -> ID .
    (53) primary_expression -> ID .
    (60) call -> ID . LPAREN arguments RPAREN
    (61) call -> ID . LPAREN RPAREN

  ! reduce/reduce conflict for RPAREN resolved using rule 26 (parameter -> ID .)
  ! reduce/reduce conflict for COMMA resolved using rule 26 (parameter -> ID .)
    COLON           shift and go to state 104
    RPAREN          reduce using rule 26 (parameter -> ID .)
    COMMA           reduce using rule 26 (parameter -> ID .)
    PLUS            reduce using rule 53 (primary_expression -> ID .)
    MINUS           reduce using rule 53 (primary_expression -> ID .)
    TIMES           reduce using rule 53 (primary_expression -> ID .)
    DIVIDE          reduce using rule 53 (primary_expression -> ID .)
    MOD             reduce using rule 53 (primary_expression -> ID .)
    EQ              reduce using rule 53 (primary_expression -> ID .)
    NE              reduce using rule 53 (primary_expression -> ID .)
    LT              reduce using rule 53 (primary_expression -> ID .)
    GT              reduce using rule 53 (primary_expression -> ID .)
    LE              reduce using rule 53 (primary_expression -> ID .)
    GE              reduce using rule 53 (primary_expression -> ID .)
    LPAREN          shift and go to state 67

  ! RPAREN          [ reduce using rule 53 (primary_expression -> ID .) ]
  ! COMMA           [ reduce using rule 53 (primary_expression -> ID .) ]


state 95

    (22) function_def -> KEYWORD ID LPAREN parameter_list . RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (24) parameter_list -> parameter_list . COMMA parameter

    RPAREN          shift and go to state 105
    COMMA           shift and go to state 106


state 96

    (23) parameter_list -> parameter .

    RPAREN          reduce using rule 23 (parameter_list -> parameter .)
    COMMA           reduce using rule 23 (parameter_list -> parameter .)


state 97

    (72) list_items -> list_items COMMA expression .

    RBRACKET        reduce using rule 72 (list_items -> list_items COMMA expression .)
    COMMA           reduce using rule 72 (list_items -> list_items COMMA expression .)


state 98

    (12) expression_statement -> ID LPAREN arguments RPAREN NEWLINE .

    NEWLINE         reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    ID              reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    KEYWORD         reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    STRING          reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    NUMBER          reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    FSTRING         reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    LBRACKET        reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    MINUS           reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    LPAREN          reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    $end            reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)
    DEDENT          reduce using rule 12 (expression_statement -> ID LPAREN arguments RPAREN NEWLINE .)


state 99

    (63) arguments -> arguments COMMA expression .

    RPAREN          reduce using rule 63 (arguments -> arguments COMMA expression .)
    COMMA           reduce using rule 63 (arguments -> arguments COMMA expression .)


state 100

    (65) arguments -> arguments COMMA STRING .
    (32) expression -> STRING .
    (58) literal -> STRING .

  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for RPAREN resolved using rule 32 (expression -> STRING .)
  ! reduce/reduce conflict for COMMA resolved using rule 32 (expression -> STRING .)
    RPAREN          reduce using rule 32 (expression -> STRING .)
    COMMA           reduce using rule 32 (expression -> STRING .)
    PLUS            reduce using rule 58 (literal -> STRING .)
    MINUS           reduce using rule 58 (literal -> STRING .)
    TIMES           reduce using rule 58 (literal -> STRING .)
    DIVIDE          reduce using rule 58 (literal -> STRING .)
    MOD             reduce using rule 58 (literal -> STRING .)
    EQ              reduce using rule 58 (literal -> STRING .)
    NE              reduce using rule 58 (literal -> STRING .)
    LT              reduce using rule 58 (literal -> STRING .)
    GT              reduce using rule 58 (literal -> STRING .)
    LE              reduce using rule 58 (literal -> STRING .)
    GE              reduce using rule 58 (literal -> STRING .)

  ! RPAREN          [ reduce using rule 65 (arguments -> arguments COMMA STRING .) ]
  ! COMMA           [ reduce using rule 65 (arguments -> arguments COMMA STRING .) ]
  ! RPAREN          [ reduce using rule 58 (literal -> STRING .) ]
  ! COMMA           [ reduce using rule 58 (literal -> STRING .) ]


state 101

    (60) call -> ID LPAREN arguments RPAREN .

    RPAREN          reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    PLUS            reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    MINUS           reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    TIMES           reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    DIVIDE          reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    MOD             reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    EQ              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    NE              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    LT              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    GT              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    LE              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    GE              reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    NEWLINE         reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    COLON           reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    RBRACKET        reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)
    COMMA           reduce using rule 60 (call -> ID LPAREN arguments RPAREN .)


state 102

    (28) if_statement -> KEYWORD expression COLON NEWLINE INDENT . statement_list DEDENT
    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT . statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD expression COLON NEWLINE INDENT . statement_list DEDENT
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 14
    statement_list                 shift and go to state 107
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 103

    (30) for_statement -> KEYWORD ID KEYWORD expression COLON . NEWLINE INDENT statement_list DEDENT

    NEWLINE         shift and go to state 108


state 104

    (25) parameter -> ID COLON . ID

    ID              shift and go to state 109


state 105

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN . return_type COLON NEWLINE INDENT statement_list DEDENT
    (67) return_type -> . ARROW ID
    (68) return_type -> . empty
    (69) empty -> .

    ARROW           shift and go to state 111
    COLON           reduce using rule 69 (empty -> .)

    return_type                    shift and go to state 110
    empty                          shift and go to state 112

state 106

    (24) parameter_list -> parameter_list COMMA . parameter
    (25) parameter -> . ID COLON ID
    (26) parameter -> . ID

    ID              shift and go to state 114

    parameter                      shift and go to state 113

state 107

    (28) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list . DEDENT
    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list . DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list . DEDENT
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    DEDENT          shift and go to state 115
    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 14
    statement                      shift and go to state 30
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 108

    (30) for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE . INDENT statement_list DEDENT

    INDENT          shift and go to state 116


state 109

    (25) parameter -> ID COLON ID .

    RPAREN          reduce using rule 25 (parameter -> ID COLON ID .)
    COMMA           reduce using rule 25 (parameter -> ID COLON ID .)


state 110

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type . COLON NEWLINE INDENT statement_list DEDENT

    COLON           shift and go to state 117


state 111

    (67) return_type -> ARROW . ID

    ID              shift and go to state 118


state 112

    (68) return_type -> empty .

    COLON           reduce using rule 68 (return_type -> empty .)


state 113

    (24) parameter_list -> parameter_list COMMA parameter .

    RPAREN          reduce using rule 24 (parameter_list -> parameter_list COMMA parameter .)
    COMMA           reduce using rule 24 (parameter_list -> parameter_list COMMA parameter .)


state 114

    (25) parameter -> ID . COLON ID
    (26) parameter -> ID .

    COLON           shift and go to state 104
    RPAREN          reduce using rule 26 (parameter -> ID .)
    COMMA           reduce using rule 26 (parameter -> ID .)


state 115

    (28) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .
    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT . KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .

  ! shift/reduce conflict for KEYWORD resolved as shift
  ! reduce/reduce conflict for NEWLINE resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for ID resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! shift/reduce conflict for KEYWORD resolved as shift
  ! reduce/reduce conflict for STRING resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for NUMBER resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for FSTRING resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for MINUS resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for LPAREN resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for $end resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
  ! reduce/reduce conflict for DEDENT resolved using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    NEWLINE         reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    ID              reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    STRING          reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    NUMBER          reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    FSTRING         reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    LBRACKET        reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    MINUS           reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    LPAREN          reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    $end            reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    KEYWORD         shift and go to state 119

  ! KEYWORD         [ reduce using rule 28 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! NEWLINE         [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! ID              [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! KEYWORD         [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! STRING          [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! NUMBER          [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! FSTRING         [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! LBRACKET        [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! MINUS           [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! LPAREN          [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! $end            [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]
  ! DEDENT          [ reduce using rule 31 (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .) ]


state 116

    (30) for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT . statement_list DEDENT
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 14
    statement_list                 shift and go to state 120
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 117

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON . NEWLINE INDENT statement_list DEDENT

    NEWLINE         shift and go to state 121


state 118

    (67) return_type -> ARROW ID .

    COLON           reduce using rule 67 (return_type -> ARROW ID .)


state 119

    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD . COLON NEWLINE INDENT statement_list DEDENT

    COLON           shift and go to state 122


state 120

    (30) for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list . DEDENT
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    DEDENT          shift and go to state 123
    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 14
    statement                      shift and go to state 30
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 121

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE . INDENT statement_list DEDENT

    INDENT          shift and go to state 124


state 122

    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON . NEWLINE INDENT statement_list DEDENT

    NEWLINE         shift and go to state 125


state 123

    (30) for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .

    NEWLINE         reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    ID              reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    KEYWORD         reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    STRING          reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    NUMBER          reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    FSTRING         reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    LBRACKET        reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    MINUS           reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    LPAREN          reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    $end            reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 30 (for_statement -> KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT .)


state 124

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT . statement_list DEDENT
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    statement_list                 shift and go to state 126
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    expression                     shift and go to state 14
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 125

    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE . INDENT statement_list DEDENT

    INDENT          shift and go to state 127


state 126

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list . DEDENT
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    DEDENT          shift and go to state 128
    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    statement                      shift and go to state 30
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    expression                     shift and go to state 14
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 127

    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT . statement_list DEDENT
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 14
    statement_list                 shift and go to state 129
    statement                      shift and go to state 3
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 128

    (22) function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .

    NEWLINE         reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    ID              reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    KEYWORD         reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    STRING          reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    NUMBER          reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    FSTRING         reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    LBRACKET        reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    MINUS           reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    LPAREN          reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    $end            reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 22 (function_def -> KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT .)


state 129

    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list . DEDENT
    (3) statement_list -> statement_list . statement
    (4) statement -> . simple_statement
    (5) statement -> . compound_statement
    (6) simple_statement -> . expression_statement
    (7) simple_statement -> . assignment_statement
    (8) simple_statement -> . return_statement
    (9) simple_statement -> . NEWLINE
    (18) compound_statement -> . function_def
    (19) compound_statement -> . if_statement
    (20) compound_statement -> . for_statement
    (21) compound_statement -> . while_statement
    (10) expression_statement -> . expression NEWLINE
    (11) expression_statement -> . call NEWLINE
    (12) expression_statement -> . ID LPAREN arguments RPAREN NEWLINE
    (13) expression_statement -> . ID LPAREN RPAREN NEWLINE
    (14) assignment_statement -> . ID ASSIGN expression NEWLINE
    (15) assignment_statement -> . ID ASSIGN list_literal NEWLINE
    (16) return_statement -> . KEYWORD expression NEWLINE
    (17) return_statement -> . KEYWORD NEWLINE
    (22) function_def -> . KEYWORD ID LPAREN parameter_list RPAREN return_type COLON NEWLINE INDENT statement_list DEDENT
    (28) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (29) if_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT
    (30) for_statement -> . KEYWORD ID KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (31) while_statement -> . KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT
    (32) expression -> . STRING
    (33) expression -> . binary_expression
    (34) expression -> . primary_expression
    (35) expression -> . NUMBER
    (36) expression -> . list_literal
    (37) expression -> . FSTRING
    (60) call -> . ID LPAREN arguments RPAREN
    (61) call -> . ID LPAREN RPAREN
    (38) binary_expression -> . unary_expression
    (39) binary_expression -> . binary_expression PLUS unary_expression
    (40) binary_expression -> . binary_expression MINUS unary_expression
    (41) binary_expression -> . binary_expression TIMES unary_expression
    (42) binary_expression -> . binary_expression DIVIDE unary_expression
    (43) binary_expression -> . binary_expression MOD unary_expression
    (44) binary_expression -> . binary_expression EQ unary_expression
    (45) binary_expression -> . binary_expression NE unary_expression
    (46) binary_expression -> . binary_expression LT unary_expression
    (47) binary_expression -> . binary_expression GT unary_expression
    (48) binary_expression -> . binary_expression LE unary_expression
    (49) binary_expression -> . binary_expression GE unary_expression
    (52) primary_expression -> . literal
    (53) primary_expression -> . ID
    (54) primary_expression -> . call
    (55) primary_expression -> . group
    (56) primary_expression -> . list_literal
    (70) list_literal -> . LBRACKET list_items RBRACKET
    (50) unary_expression -> . primary_expression
    (51) unary_expression -> . MINUS unary_expression
    (57) literal -> . NUMBER
    (58) literal -> . STRING
    (59) group -> . LPAREN expression RPAREN

    DEDENT          shift and go to state 130
    NEWLINE         shift and go to state 9
    ID              shift and go to state 16
    KEYWORD         shift and go to state 19
    STRING          shift and go to state 20
    NUMBER          shift and go to state 23
    FSTRING         shift and go to state 24
    LBRACKET        shift and go to state 29
    MINUS           shift and go to state 26
    LPAREN          shift and go to state 17

    expression                     shift and go to state 14
    statement                      shift and go to state 30
    simple_statement               shift and go to state 4
    compound_statement             shift and go to state 5
    expression_statement           shift and go to state 6
    assignment_statement           shift and go to state 7
    return_statement               shift and go to state 8
    function_def                   shift and go to state 10
    if_statement                   shift and go to state 11
    for_statement                  shift and go to state 12
    while_statement                shift and go to state 13
    call                           shift and go to state 15
    list_literal                   shift and go to state 18
    binary_expression              shift and go to state 21
    primary_expression             shift and go to state 22
    unary_expression               shift and go to state 25
    literal                        shift and go to state 27
    group                          shift and go to state 28

state 130

    (29) if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .

    NEWLINE         reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    ID              reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    KEYWORD         reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    STRING          reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    NUMBER          reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    FSTRING         reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    LBRACKET        reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    MINUS           reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    LPAREN          reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    $end            reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)
    DEDENT          reduce using rule 29 (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT KEYWORD COLON NEWLINE INDENT statement_list DEDENT .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for NEWLINE in state 15 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 61 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 65 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 65 resolved as shift
WARNING: shift/reduce conflict for NEWLINE in state 85 resolved as shift
WARNING: shift/reduce conflict for KEYWORD in state 115 resolved as shift
WARNING: shift/reduce conflict for KEYWORD in state 115 resolved as shift
WARNING: reduce/reduce conflict in state 18 resolved using rule (expression -> list_literal)
WARNING: rejected rule (primary_expression -> list_literal) in state 18
WARNING: reduce/reduce conflict in state 20 resolved using rule (expression -> STRING)
WARNING: rejected rule (literal -> STRING) in state 20
WARNING: reduce/reduce conflict in state 22 resolved using rule (expression -> primary_expression)
WARNING: rejected rule (unary_expression -> primary_expression) in state 22
WARNING: reduce/reduce conflict in state 23 resolved using rule (expression -> NUMBER)
WARNING: rejected rule (literal -> NUMBER) in state 23
WARNING: reduce/reduce conflict in state 63 resolved using rule (expression -> STRING)
WARNING: rejected rule (arguments -> STRING) in state 63
WARNING: reduce/reduce conflict in state 63 resolved using rule (expression -> STRING)
WARNING: rejected rule (literal -> STRING) in state 63
WARNING: reduce/reduce conflict in state 94 resolved using rule (parameter -> ID)
WARNING: rejected rule (primary_expression -> ID) in state 94
WARNING: reduce/reduce conflict in state 100 resolved using rule (expression -> STRING)
WARNING: rejected rule (arguments -> arguments COMMA STRING) in state 100
WARNING: reduce/reduce conflict in state 100 resolved using rule (expression -> STRING)
WARNING: rejected rule (literal -> STRING) in state 100
WARNING: reduce/reduce conflict in state 115 resolved using rule (if_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT)
WARNING: rejected rule (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT) in state 115
WARNING: Rule (arguments -> STRING) is never reduced
WARNING: Rule (arguments -> arguments COMMA STRING) is never reduced
WARNING: Rule (while_statement -> KEYWORD expression COLON NEWLINE INDENT statement_list DEDENT) is never reduced
